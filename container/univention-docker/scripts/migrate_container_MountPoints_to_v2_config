#!/usr/bin/python2.7
"""
Migrate container volume config to config.v2.json
"""
# Copyright 2016-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

from univention.config_registry import ConfigRegistry
from collections import OrderedDict
from optparse import OptionParser, SUPPRESS_HELP
from logging import getLogger, basicConfig, DEBUG, INFO, WARNING, ERROR
import sys
import json
import os
import re

def main():
	global options
	options = parse_args()
	setup_logging()
	log = getLogger(__name__)
	log.info('Migrating container volume config to config.v2.json')

	global ucr
	ucr = ConfigRegistry()
	ucr.load()

	rc = migrate_all_app_containers()
	sys.exit(rc)


def migrate_all_app_containers():
	log = getLogger(__name__).getChild('migrate_all_app_containers')
	p = re.compile('^appcenter/apps/(.*)/container$')

	rc = 0
	for ucr_key, container_id in ucr.items():
		m = p.match(ucr_key)
		if not m:
			continue
		app_name = m.group(1)
		log.info('Migrating app container %s (%s)' % (container_id, app_name))
		rc |= migrate_app_container(container_id)

	return rc


def migrate_app_container(container_id):
	log = getLogger(__name__).getChild('migrate_app_container')
	container_path = '/var/lib/docker/containers/%s' % container_id

	old_cfg = os.path.join(container_path, 'config.json')
	if not os.path.exists(old_cfg):
		log.warn('Ignoring %s (no config.json found)' % (container_id,))
		return 2

	with open(old_cfg, 'r') as f:
		old_data = json.load(f, object_pairs_hook=OrderedDict)

	new_cfg = os.path.join(container_path, 'config.v2.json')
	if not os.path.exists(new_cfg):
		log.error('Cannot migrate %s (no config.v2.json found)' % (container_id,))
		return 1

	with open(new_cfg, 'r') as f:
		new_data = json.load(f, object_pairs_hook=OrderedDict)

	for src, dst in old_data["Volumes"].items():
		if src not in new_data["MountPoints"]:
			break
	else:
		log.info('Nothing to do for %s' % (container_id,))
		return 0

	for src, dst in old_data["Volumes"].items():
		if src in new_data["MountPoints"]:
			continue

		rw = old_data["VolumesRW"][src]
		new_data["MountPoints"][src] = OrderedDict([
			("Source", src),
			("Destination", dst),
			("RW", rw),
			("Name", ""),
			("Driver", ""),
			("Relabel", ""),
			("Propagation", "rprivate"),
			("Named", False),
			("ID", "")
		])

	if options.dry_run:
		return 0

	with open(new_cfg, 'w') as f:
		json.dump(new_data, f, separators=(',', ':'))
		f.write('\n')

	return 0


def parse_args():
	usage = '%prog [options]'
	description = sys.modules[__name__].__doc__
	parser = OptionParser(usage=usage, description=description)
	parser.add_option(
		'--verbose', '-v',
		action='count', default=2,
		help='Increase verboseness')
	parser.add_option(
		'--dry-run',
		action='store_true',
		help='Simulation mode')
	parser.add_option(
		'--run-tests',
		action='store_true',
		help=SUPPRESS_HELP)

	options, args = parser.parse_args()
	if args:
		parser.error('No argument expected')

	return options


def setup_logging():
	FORMAT = '%(asctime)-15s %(levelname)-7s %(message)s'
	LEVELS = [ERROR, WARNING, INFO, DEBUG]
	try:
		level = LEVELS[options.verbose]
	except IndexError:
		level = LEVELS[-1]
	basicConfig(format=FORMAT, level=level, stream=sys.stderr)


def run_tests():
	import doctest
	doctest.testmod()


if __name__ == '__main__':
	main()
