#!/usr/share/ucs-test/runner python2.7
## desc: Rename Administrator
## tags:
##  - basic
##  - rename_default_account
##  - skip_admember
## roles:
##  - domaincontroller_master
##  - domaincontroller_backup
##  - domaincontroller_slave
##  - memberserver
## exposure: dangerous

import glob
import os
import re
import subprocess
import time
from datetime import datetime

from ldap.dn import escape_dn_chars
from ldap.filter import filter_format

import univention.config_registry
import univention.testing.strings as uts
import univention.testing.utils as utils
from univention.testing.ucr import UCSTestConfigRegistry
from univention.testing.ucs_samba import wait_for_drs_replication
from univention.testing.udm import UCSTestUDM
from univention.testing.utils import package_installed


RE_FILE_PATTERN = re.compile('^(?:Multifile|File): +(.+)$')
IGNORE = {
	'/etc/bind/named.conf.samba4',
	'/etc/cups/cups-files.conf',
	'/etc/freeradius/3.0/mods-available/ldap',
	'/etc/issue',
	'/etc/samba/base.conf',
	'/etc/simplesamlphp/config.php',
	'/etc/welcome.msg',
	'/var/www/univention/meta.json',
}
UCRV = "users/default/administrator"


def find_all_template():
	# find all template files by iterating over all referenced templates in the ucr *.info files
	templates = glob.glob('/etc/univention/templates/info/*.info')
	# find all lines that start with File or Multifile and strip it to get the paths of the template files
	return {
		os.path.join("/", fn)
		for template in templates
		for line in open(template, "r")
		for fn in RE_FILE_PATTERN.findall(line)
	}


def search_templates(old_admin_name, new_admin_name, server_role):
	files = find_all_template() - IGNORE

	# A list of templates which are referencing the Administrator. The new name must be found in them
	should_contain_admin = {
		'/etc/ldap/slapd.conf',
	}
	if server_role != 'domaincontroller_master':
		should_contain_admin.remove('/etc/ldap/slapd.conf')

	# Look for alle occurences of "Administrator", excluding "Administrators", which is a group name
	for fn in files:
		if not os.path.isfile(fn):
			continue

		print('Checking template %s' % (fn,))
		with open(fn, 'rb') as content_file:
			content = content_file.read().decode('UTF-8', 'replace')

		if fn in should_contain_admin and new_admin_name not in content:
			utils.fail('New admin name %s not in %s' % (new_admin_name, fn))

		if old_admin_name in content:
			lines_containing = [
				'%03d: %s' % (n, l) for n, l in enumerate(content.splitlines(), start=1)
				if old_admin_name in l and 'Administrators' not in l
			]
			if lines_containing:
				print('\n'.join(lines_containing))
				utils.fail('Old group name %s still in file %s' % (old_admin_name, fn))


def wait_for_ucr(iterations, expected, ucr_test):  # type: (int, str, UCSTestConfigRegistry) -> bool
	for i in range(iterations):
		if i:
			# ucr commit for the slapd.conf takes a long time in ucs4 bug #34003
			time.sleep(1)

		ucr_test.load()
		current = ucr_test.get(UCRV, 'Administrator')
		print('[%3d] UCRV %s is set to %r, expexting %r' % (i, UCRV, current, expected))
		if expected == current:
			return True
	else:
		utils.fail('UCRV %s is set to %r, expecting %r' % (UCRV, current, expected))
		return False


def uid2dn(uid, ldap_base):
	return "uid=%s,cn=users,%s" % (escape_dn_chars(uid), ldap_base)


def wait_to_settle(old_admin_name):  # type: (str) -> None
	FN = "/etc/ldap/slapd.conf"
	try:
		old = ()
		for i in range(100):
			if i:
				time.sleep(1)

			lid = int(open("/var/lib/univention-directory-listener/notifier_id").read().strip())
			nid = int(subprocess.check_output(["/usr/share/univention-directory-listener/get_notifier_id.py"]).strip())
			stat1 = os.stat(FN)
			found_old = old_admin_name in open(FN, "r").read()
			stat2 = os.stat("/var/lib/extrausers/group")
			new = (nid, lid, stat1.st_size, stat1.st_mtime, found_old, stat2.st_size, stat2.st_mtime)
			if old != new:
				print("%2d\t%7d\t%7d\t%7d\t%7d\t%s\t%7d\t%7d\t%s" % ((i,) + new + (datetime.now(),)))
				old = new  # type: ignore

			if not found_old:
				return
	except Exception as exc:
		print(exc)

	utils.wait_for_replication_and_postrun()
	time.sleep(20)  # for slapd restart + ldap-groups-to-file


def test_rename_domain_users():
	with UCSTestConfigRegistry() as ucr_test, UCSTestUDM() as udm:
		server_role = ucr_test.get('server/role')
		ldap_base = ucr_test.get('ldap/base')
		old_admin_name = ucr_test.get(UCRV, 'Administrator')
		old_admin_dn = uid2dn(old_admin_name, ldap_base)
		if os.path.exists('/etc/ldap.secret'):
			credentials = ['--binddn', 'cn=admin,%s' % (ldap_base,), '--bindpwdfile', '/etc/ldap.secret']
		else:
			second_admin = udm.create_user(append={'groups': ['cn=Domain Admins,cn=groups,%s' % (ldap_base,)]})[0]
			credentials = ['--binddn', second_admin, '--bindpwd', 'univention']

		new_admin_name = uts.random_name()
		new_admin_dn = uid2dn(new_admin_name, ldap_base)
		try:
			print('\n##################################################################')
			print('Renaming default administrator %s to %s' % (old_admin_name, new_admin_name))
			print('##################################################################\n')
			cmd = [
				'udm-test', 'users/user', 'modify',
				'--dn', old_admin_dn,
				'--set', 'username=%s' % (new_admin_name,),
			]
			cmd.extend(credentials)
			subprocess.check_call(cmd)

			wait_to_settle(old_admin_name)

			# Check UCR Variable
			print('\n##################################################################')
			print('Checking if UCR Variable %s is set to %s' % (UCRV, new_admin_name))
			print('##################################################################\n')
			if not wait_for_ucr(60, new_admin_name, ucr_test):
				return

			# Search templates
			print('\n##################################################################')
			print('Search templates for old and new name of default domainadmins group')
			print('##################################################################\n')
			search_templates(old_admin_name, new_admin_name, server_role)
		finally:
			try:
				wait_for_drs_replication(filter_format('(sAMAccountName=%s)', (new_admin_name,)))
			except Exception:
				# clean up even if the wait_for method fails and wait a bit if it terminated at the beginning
				time.sleep(10)

			if not package_installed('univention-samba4'):
				time.sleep(20)
			print('\n##################################################################')
			print('Cleanup')
			print('##################################################################\n')
			subprocess.call([
				'udm-test', 'users/user', 'modify',
				'--dn', new_admin_dn,
				'--set', 'username=%s' % (old_admin_name,),
			] + credentials)

			# wait until renaming and UCR Variable is set back again
			utils.wait_for_replication_and_postrun()
			if not wait_for_ucr(60, old_admin_name, ucr_test):
				univention.config_registry.handler_set(['%s=%s' % (UCRV, old_admin_name)])


if __name__ == '__main__':
	test_rename_domain_users()
