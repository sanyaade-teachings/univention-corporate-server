#!/bin/bash
#
# Univention System Setup
#  start X server with browser
#
# Copyright 2011-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

if [ -z "$1" -o "$1" = "--installer" -o "$1" = "--installertext" ] # no parameter --> called from init script ; --installer|--installertext --> called from debian installer
then # call self in xinit as nobody, then start gdm
	echo -e "\n\n\n"
	echo "$0 has been started at $(date)"
	mode="init"
	use_xserver="yes"
	if [ "$1" = "--installer" ] ; then
		shift
		mode="installer"
	fi
	if [ "$1" = "--installertext" ] ; then
		shift
		mode="installer"
		use_xserver=""
	fi
	echo "Started in '$mode' mode"
	echo
	USS_PROFILE="/var/cache/univention-system-setup/profile"

	# set random password for system setup user
	USSPASSWD="$(tr -c -d '[:alnum:]' < /dev/urandom | head -c 30)"
	echo "__systemsetup__:$USSPASSWD" | chpasswd

	default_locale=en_US
	eval "$(/usr/sbin/univention-config-registry shell locale/default)"
	if [ -n "$locale_default" ]; then
		default_locale=${locale_default%%.*}
	fi
	USSURL="http://localhost/univention/setup/?username=__systemsetup__&password=${USSPASSWD}&lang=$default_locale"
	BROWSERPIDFILE="/var/cache/univention-system-setup/browser.pid"

	if [ "$mode" = "installer" ] ; then
		# mount
		mountpoint /proc || mount -t proc proc /proc
		mountpoint /dev || mount -t devtmpfs devtmpfs /dev
		mkdir -p /dev/pts
		mountpoint /dev/pts || mount -t devpts devpts /dev/pts
		mountpoint /sys || mount -t sysfs sysfs /sys

		# firefox needs a tmpfs on /dev/shm which is not mounted by the debian installer
		mkdir -m 777 /dev/shm || true
		mountpoint /dev/shm || mount -t tmpfs tmpfs /dev/shm

		# Get DHCP IP address saved in UCR by /etc/network/if-up.d/12_ucr
		service networking start

		# make sure en_US is set as available locale to avoid problems
		# with locale fallbacks to en_US (Bug #42853)
		available_locales="$(/usr/sbin/univention-config-registry get locale)"
		case "$available_locales" in
			*en_US*) ;;
			*) /usr/sbin/univention-config-registry set locale="$available_locales en_US.UTF-8:UTF-8";;
		esac

		# Start/Restart UMC and Webserver
		service univention-runit start
		service univention-management-console-server restart
		service univention-management-console-web-server restart

		# hide some system setup fields Bug #35685
		/usr/sbin/univention-config-registry set \
			system/setup/boot/fields/blacklist='password locale reboot' \
			system/setup/boot/pages/blacklist='locale welcome network' \
			system/setup/boot/installer='true'

		# after installation an outdated apache process is running that cannot be kill via pid file
		pkill -f apache2
		service apache2 stop
		sleep 2
		service apache2 start
	else
		# stop plymouth - otherwise it is burning CPU power in background
		plymouth quit
	fi

	# move old profile
	if [ -f "$USS_PROFILE" ]; then
		mv "$USS_PROFILE" "$USS_PROFILE.bak"
	fi

	if [ -n "$use_xserver" ] ; then
		export DISPLAY=:0
		if xwininfo -root -stats > /dev/null 2>/dev/null ; then
			/bin/su -s /bin/sh nobody -m --login -c "'$0' '$USSURL'" -- 3> "$BROWSERPIDFILE"
		else
			# start X11 and browser ; script returns pid of browser on fd3
			[ -x /usr/bin/xinit ] && /usr/bin/xinit /bin/su -s /bin/sh nobody -c "'$0' '$USSURL'" -- 3> "$BROWSERPIDFILE"
		fi
	fi

	# start welcome screen in appliance mode
	# when called along with the Debian installer, a reboot is performed
	if [ "$mode" = "init" -a -x /sbin/plymouthd -a -x /usr/bin/univention-welcome-screen ]; then
		systemctl start univention-welcome-screen
	fi

	# remove pidfile
	rm -f "$BROWSERPIDFILE"

	# set new random password for system setup user
	USSPASSWD="$(tr -c -d '[:alnum:]' < /dev/urandom | head -c 30)"
	echo "__systemsetup__:$USSPASSWD" | chpasswd

	if [ ! -s /var/cache/univention-system-setup/profile ] && [ ! -e /var/cache/univention-system-setup/packages/Packages ]
	then
		# Download packages
		/usr/share/univention-system-setup/download-packages
	fi

	if [ "$mode" = "installer" ]
	then
		/usr/sbin/univention-config-registry unset system/setup/boot/fields/blacklist system/setup/boot/pages/blacklist system/setup/boot/installer

		# Disable netinst CD image in sources.list
		if [ -e "/etc/apt/sources.list" ]
		then
			printf "# This file is not maintained via Univention Configuration Registry\n# and can be used to add further package repositories manually\n" >/etc/apt/sources.list
		fi
	fi

	exit
fi

### this is executed by xinit->su as nobody inside the running X server ###
URL="$1"

# set background
xwininfo=$(LC_ALL=C xwininfo -root -stats)
screenWidth=$(sed -ne 's/  Width: //p' <<<"$xwininfo")
screenHeight=$(sed -ne 's/  Height: //p' <<<"$xwininfo")
while read imageWidth imageHeight
do
	if [ "$imageWidth" -le "$screenWidth" -a "$imageHeight" -le "$screenHeight" ]
	then
		break
	fi
done < <(find /usr/share/gdm/themes/univention/ -regex '.*/[0-9]+x[0-9]+\.png'|tr -dc '0-9x\n'|tr x ' '|sort -snrk2|sort -snrk1)
if [ -n "$imageWidth" -a -n "$imageHeight" ]
then
	xsetbg -fork -fullscreen /usr/share/gdm/themes/univention/"$imageWidth"x"$imageHeight".png
fi
if [ "$screenWidth" -lt 1000 ]
then
	URL="${URL}&width=${screenWidth}"
fi

# Do not blank screen during system setup
xset s off -dpms

# create and export a temporary home directory
HOME=$(mktemp -d)
export HOME
profilePath=$(mktemp -d -p "$HOME")
# do not show the "know your rights" popup
echo 'user_pref("browser.rights.3.shown", true);' >> "$profilePath"/prefs.js
# do not ask for performance reporting
echo 'user_pref("toolkit.telemetry.prompted", 2);' >> "$profilePath"/prefs.js
echo 'user_pref("browser.tabs.remote.autostart.2", false);' >> "$profilePath"/prefs.js
echo 'user_pref("browser.tabs.remote.autostart", false);' >> "$profilePath"/prefs.js
echo 'user_pref("toolkit.telemetry.rejected", true);' >> "$profilePath"/prefs.js
echo 'user_pref("toolkit.telemetry.enabled", false);' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyAccepted", true);' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyAcceptedVersion", 1);' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyNotifiedTime", "1365509001307");' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyResponseTime", "1365517336671");' >> "$profilePath"/prefs.js
echo 'user_pref("datareporting.policy.dataSubmissionPolicyResponseType", "accepted-info-bar-dismissed");' >> "$profilePath"/prefs.js
# do not store passwords
echo 'user_pref("signon.rememberSignons", false);' >> "$profilePath"/prefs.js
# deactivate firefox autoupdate
echo 'user_pref("app.update.enabled", false);' >> "$profilePath"/prefs.js
echo 'user_pref("app.update.auto", false);' >> "$profilePath"/prefs.js
# deactivate default browser check
echo 'user_pref("browser.shell.checkDefaultBrowser", false);' >> "$profilePath"/prefs.js
# allow JavaScript to close a windoe
echo 'user_pref("dom.allow_scripts_to_close_windows", true);' >> "$profilePath"/prefs.js
# hide nav bar and menu bar
echo 'user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);' >> "$profilePath"/prefs.js
mkdir "$profilePath"/chrome
userChrome="$(cat << EOF
@namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul");
#TabsToolbar[inFullscreen="true"], #nav-bar[inFullscreen="true"] {
  visibility: collapse !important;
}
EOF
)"
echo "$userChrome" > "$profilePath"/chrome/userChrome.css
# start window manager so that firefox' menus work correctly

openbox --config-file /etc/xdg/openbox/rc_no_shortcuts.xml &
windowManager=$!
# start browser
firefox -profile "$profilePath" "$URL" &
# send pid of browser to root instance of this script
echo "$!" >&3
# wait for browser
wait %%
kill "$windowManager"
wait
find "$profilePath" -delete
find "$HOME" -delete

