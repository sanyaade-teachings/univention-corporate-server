#!/bin/bash
### BEGIN INIT INFO
# Provides:          univention-system-setup-boot
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Univention System Setup on boot
### END INIT INFO
#
# Copyright 2004-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

eval "$(univention-config-registry shell system/setup/boot/start)"

. /lib/lsb/init-functions
NAME='univention-system-setup-boot'
DESC=$(get_lsb_header_val "$0" Short-Description)

. /usr/share/univention-lib/ucr.sh

case "$1" in
	start)
		log_action_msg "Starting $DESC"

		# deconfigure temporary interfaces
		ucr search --brief --value '^appliance-mode-temporary$'|cut -f1 -d:|grep -E '^interfaces/[^/]+_[^/]/type$' | while read
		do
			echo "${REPLY%type}"{netmask,address,broadcast,network,type}
		done |
		xargs -r ucr unset

		# Show correct EC2 server address in motd and meta.json
		for i in /etc/motd.setup /var/www/univention/meta.json; do
			if [ -e "$i" ]; then
				ucr commit "$i" >/dev/null 2>&1
			fi
		done

		# Add public ssh key if the system was started in EC2:
		if is_ucr_true server/amazon; then
			log_action_cont_msg "Getting ssh keys from EC2"
			test -d /root/.ssh || mkdir -p /root/.ssh
			test -e /root/.ssh/authorized_keys || touch /root/.ssh/authorized_keys

			key="$(wget -q -O - http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key)"
			if ! grep -q "$key" /root/.ssh/authorized_keys; then
				echo "$key"  >>/root/.ssh/authorized_keys
			fi
		fi

		if is_ucr_true server/amazon && is_ucr_true system/setup/boot/networking; then
			echo "Save dhclient result in UCR" >>/var/log/univention/setup.log
			/usr/share/univention-network-common/dhclient2ucr --set-forwarder >>/var/log/univention/setup.log 2>&1
			ucr set system/setup/boot/networking=false >>/var/log/univention/setup.log 2>&1
			echo "Save dhclient result in UCR (done)" >>/var/log/univention/setup.log
		fi

		if is_ucr_true system/setup/boot/start; then
			/usr/share/univention-system-setup/startxwithfirefox > "/var/log/univention/system-setup-boot.log" 2>&1
		fi
		log_action_end_msg 0
		;;
	stop|restart|force-reload)
		;;
	status)
		if is_ucr_true system/setup/boot/start
		then
			log_success_msg "$DESC is enabled"
		else
			log_failure_msg "$DESC is disabled"
		fi
		;;
	*)
		echo "Usage: $0 {start|stop|restart|force-reload|status}."
		exit 1
		;;
esac
