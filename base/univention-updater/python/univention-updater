#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
"""\
{prog}: tool for updating local system

Syntax:
  {prog} <local,net,cdrom> [--device <cdrom device>] [--cdrom <cdrom mount point>] [--iso <iso-image>] [--updateto <UCS-Release>] [--no-clean] [--silent] [--check]
  {prog} [--help]

Options:
  --updateto <release>  Upper limit for version
  --no-clean            Skip cleaning downloaded package file
  --silent              No output to STDOUT
  --check               Check if system is up-to-date
  --iso <file>          Path to ISO image
  --ignoressh           Skip check for SSH terminal
  --ignoreterm          Skip check for X11 Terminal
  --ignore-releasenotes Skip showing release notes
  --noninteractive      Do not ask interactive questions
"""
from __future__ import print_function
# Copyright 2004-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

# The following commands are supported:
#  * local
#  * cdrom
#  * net

import os
import sys
import time
import getopt
import subprocess
import datetime
import itertools
from textwrap import dedent, wrap
from errno import ENOENT

try:
    import univention.debug as ud
except ImportError:
    import univention.debug2 as ud

from univention.config_registry import ConfigRegistry

from univention.admindiary.client import write_event
from univention.admindiary.events import UPDATE_STARTED, UPDATE_FINISHED_SUCCESS, UPDATE_FINISHED_FAILURE

from univention.updater.errors import PreconditionError, ConfigurationError, RequiredComponentError, VerificationError, DownloadError
from univention.updater.ucs_version import UCS_Version
from univention.updater.tools import UniventionUpdater, LocalUpdater
from univention.updater.locking import UpdaterLock
from univention.updater.commands import cmd_update, cmd_dist_upgrade


# TODO:
#   * check the local repository path /var/lib/univention-reposiotry
#   * changed variable update/server to repository/online/server

FN_STATUS = '/var/lib/univention-updater/univention-updater.status'
failure = '/var/lib/univention-updater/update-failed'
reboot_required = '/run/univention-updater-reboot'
TMPSOURCE = '/etc/apt/sources.list.d/00_ucs_temporary_installation.list'
TMPSOURCE2 = '/etc/apt/sources.list.d/00_ucs_update_in_progress.list'

LOGNAME = '/var/log/univention/updater.log'
fd_log = sys.stderr
stdout_orig = sys.stdout
nostdout = False

updater_status = {}


class UpdateError(Exception):

    """ Exception to signal errors on update.

    msg: Human readable message.
    errorsource: One of 'SETTINGS', 'PREPARATION', 'PREUP', 'UPDATE', 'POSTUP'
    """

    def __init__(self, msg=None, errorsource=None):
        Exception.__init__(self, msg)
        self.errorsource = errorsource


class UpToDateNoError(Exception):

    """ Exception to signal when no update needs to be done """


def log(str):
    """ Log message to LOGNAME. """
    print(str, file=fd_log)
    fd_log.flush()


def dprint(str):  # type: (str) -> None
    """ Print message to stdout and LOGNAME. """
    if nostdout:
        print(str, file=fd_log)
        fd_log.flush()
        return

    for fd in (stdout_orig, fd_log):
        print(str, file=fd)
        fd.flush()


def update_status(**kwargs):  # type: (**str) -> None
    '''
    update updater_status and write status to disk

    Keys:
    - current_version ==> UCS_Version ==> 2.3-1
    - next_version    ==> UCS_Version ==> 2.3-2
    - target_version  ==> UCS_Version ==> 2.4-0
    - type            ==> (LOCAL|NET|CDROM)
    - status          ==> (RUNNING|FAILED|DONE)
    - phase           ==> (PREPARATION|PREUP|UPDATE|POSTUP)     ==> only valid if status=RUNNING
    - errorsource     ==> (SETTINGS|PREPARATION|PREUP|UPDATE|POSTUP)
    '''
    global updater_status
    updater_status.update(kwargs)
    if updater_status.get('status') != 'RUNNING':
        updater_status.pop('phase', None)
    # write temporary file
    fn = '%s.new' % FN_STATUS
    try:
        fd = open(fn, 'w+')
        for key, val in updater_status.items():
            fd.write('%s=%s\n' % (key, val))
        fd.close()
    except Exception:
        dprint('Warning: cannot update %s' % fn)
    try:
        os.rename(fn, FN_STATUS)
    except Exception:
        dprint('Warning: cannot update %s' % FN_STATUS)


def get_status():
    status = {}
    try:
        with open(FN_STATUS, 'r') as fd:
            for line in fd.readlines():
                try:
                    key, value = line.rstrip().split('=', 1)
                except ValueError:
                    continue
                status[key] = value
    except EnvironmentError:
        pass
    return status


def usage(fd=sys.stdout):
    """
    Print usage message.

    :param file fd: Override standard error output. Defaults to :py:obj:`sys.stdout`.
    """
    fd.write(__doc__.format(prog=os.path.basename(__file__)))


def deactivateSourcesListMethods(methods=['cdrom']):
    """ Rewrite sources.list deactivating all stanzas using any of the specified methods. """
    cnt = 0
    lines = []
    deactivated_lines = []
    f = open('/etc/apt/sources.list', 'r')
    for line in f.readlines():
        line = line.strip(' \n\t')
        for method in methods:
            if line.startswith('deb %s:' % method) or line.startswith('deb-src %s:' % method):
                line = '#%s' % line
                deactivated_lines.append(line)
                cnt += 1
        lines.append(line)
    f.close()
    if cnt:
        f = open('/etc/apt/sources.list', 'w')
        f.write('\n'.join(lines))
        f.write('\n')
        f.close()
        log('Hint: deactivated %d lines in /etc/apt/sources.list:\n' % cnt)
        log('   %s\n' % '\n   '.join(deactivated_lines))


def remove_temporary_sources_list():
    """ Add the temporary sources.list. """
    try:
        os.remove(TMPSOURCE)
    except EnvironmentError as ex:
        if ex.errno != ENOENT:
            raise

    try:
        os.remove(TMPSOURCE2)
    except EnvironmentError as ex:
        if ex.errno != ENOENT:
            raise


def add_temporary_sources_list(temporary_sources_list):
    """ Add line to a temporary sources.list. """
    remove_temporary_sources_list()
    with open(TMPSOURCE, 'w') as fp:
        for entry in temporary_sources_list:
            print(entry, file=fp)


def update_available(mode, ucr, cdrom_mount_point, iso=None, updater=None):
    """ Checks if there is an update available.
    Returns the next version, or None if up-to-date, or throws an UpdateError if the next version can not be identified."""

    log('--->DBG:update_available(mode=%s, cdrom_mount_point=%s, iso=%s)' % (mode, cdrom_mount_point, iso))

    nextversion = None

    vv = ucr['version/version']
    vp = ucr['version/patchlevel']

    if mode == 'local':
        dprint('Checking local repository')

        if not updater:
            updater = LocalUpdater()
        try:
            assert updater.server.access(None, '')
            nextversion = updater.release_update_available(errorsto='exception')
        except DownloadError:
            raise UpdateError('A local repository was not found.\n' +
                              '       Please check the UCR variable repository/mirror/basepath\n' +
                              '       or try to install via "univention-updater net"', errorsource='SETTINGS')

    elif mode == 'cdrom':
        if iso:
            device_name = "ISO image"

            dprint('Mounting the ISO image %s' % iso)

            resultCode = os.system('mount -o loop %s %s' % (iso, cdrom_mount_point))
            if resultCode not in (0, 32):
                res = os.system('mount -l 2>>%s | grep -q " %s "' % (LOGNAME, cdrom_mount_point))
                if res != 0:
                    raise UpdateError('Failed to mount %s' % iso, errorsource='PREPARATION')
        else:
            device_name = "cdrom"

            dprint('Mounting cdrom %s' % cdrom_mount_point)

            resultCode = subprocess.call(['mount', cdrom_mount_point])
            if resultCode not in (0, 32):
                res = os.system('mount -l 2>>%s | grep -q " %s "' % (LOGNAME, cdrom_mount_point))
                if res != 0:
                    raise UpdateError('Failed to mount cdrom', errorsource='PREPARATION')
        try:
            # Let's check if this Update could be installed, as on the dvd is a textfile for which UCS release this update is
            if os.path.exists('%s/ucs-updates/' % cdrom_mount_point):
                try:
                    f = open('%s/ucs-updates/ucs_%s-%s.txt' % (cdrom_mount_point, vv, vp))
                    try:
                        nextversion = f.readline().strip('\n').lower().replace('nextupdate=', '')
                    finally:
                        f.close()
                except:
                    raise UpdateError("%s does not contain an update for version %s-%s." % (device_name, vv, vp), errorsource='PREPARATION')
            else:
                raise UpdateError("%s is not a valid UCS update medium" % device_name, errorsource='PREPARATION')
        finally:
            resultCode = subprocess.call(['umount', cdrom_mount_point])
            if resultCode != 0:
                res = os.system('mount -l 2>>%s | grep -q " %s "' % (LOGNAME, cdrom_mount_point))
                if res == 0:
                    dprint('Warning: Failed to unmount %s' % device_name)
        if nextversion:
            try:
                ver = UCS_Version(nextversion)
            except ValueError:
                pass
            else:
                mm_version = UCS_Version.FORMAT % ver
                if not updater:
                    updater = LocalUpdater()
                components = updater.get_current_components()
                failed = set()
                for component in components:
                    if not updater.get_component_repositories(component, [mm_version], False):
                        failed.add(component)
                if failed:
                    raise RequiredComponentError(mm_version, failed)

    elif mode == 'net':
        dprint('Checking network repository')
        try:
            if not updater:
                updater = UniventionUpdater()
            nextversion = updater.release_update_available(errorsto='exception')
        except RequiredComponentError:
            raise
        except ConfigurationError as ex:
            raise UpdateError('The configured repository is unavailable: %s' % (ex,), errorsource='SETTINGS')

    if nextversion in (None, 'none'):
        return None
    else:
        return nextversion


def update_ucr_updatestatus():
    try:
        devnull = open(os.path.devnull, 'w')
        subprocess.call('/usr/share/univention-updater/univention-updater-check', stdout=devnull, stderr=devnull)
        devnull.close()
    except:
        dprint('Warning: calling univention-updater-check failed.')


def call_local(updateto=None, clean=None, ignoressh=False, ignoreterm=False, ignorereleasenotes=False):
    """Call updater in "local" mode."""
    calllocal = [sys.argv[0], 'local']
    if updateto:
        calllocal += ['--updateto', '%s' % updateto]
    if not clean:
        calllocal.append('--no-clean')
    if ignoressh:
        calllocal.append('--ignoressh')
    if ignoreterm:
        calllocal.append('--ignoreterm')
    if ignorereleasenotes:
        calllocal.append('--ignore-releasenotes')
    os.execv(sys.argv[0], calllocal)
    dprint('Fatal: failed to exec: %r' % calllocal)
    sys.exit(1)


def main():
    # PATH does not contain */sbin when called from cron
    os.putenv('PATH', '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/X11')

    for cdrom_mount_point in ('/cdrom', '/media/cdrom', '/media/cdrom0'):
        if os.path.isdir(cdrom_mount_point):
            break
    iso = None

    ucr = ConfigRegistry()
    ucr.load()

    ud.init(LOGNAME, 0, 0)
    try:
        loglevel = int(ucr.get('update/debug/level', 2))
    except ValueError:
        loglevel = 2
    ud.set_level(ud.NETWORK, loglevel)
    fp_debug = open(LOGNAME, 'a+')
    # sys.stdout=fp_debug

    log('**** Starting univention-updater with parameter=%s' % sys.argv)

    if len(sys.argv) < 2:
        usage(sys.stderr)
        fp_debug.close()
        sys.exit(2)

    if sys.argv[1] == 'net':
        command = 'net'
    elif sys.argv[1] == 'cdrom':
        command = 'cdrom'
    elif sys.argv[1] == 'local':
        command = 'local'
    else:
        usage(sys.stderr)
        fp_debug.close()
        sys.exit(2)

    updateto = None
    updateto_args = []
    clean = True
    ignoressh = False
    ignoreterm = False
    ignorereleasenotes = False

    longopts = ['src=', 'device=', 'cdrom=', 'iso=', 'updateto=', 'reboot=', 'no-clean', 'check', 'ignoressh', 'ignoreterm', 'ignore-releasenotes', 'silent', 'noninteractive', ]
    try:
        opts, args = getopt.getopt(sys.argv[2:], '', longopts)
    except getopt.error as msg:
        dprint(msg)
        fp_debug.close()
        sys.exit(2)

    for opt, val in opts:
        if opt == '--src':
            dprint('Warning: --src is deprecated; value is ignored.')
        elif opt == "--device":
            dprint('Warning: --device is deprecated; value is ignored.')
        elif opt == "--cdrom":
            cdrom_mount_point = val
        elif opt == "--iso":
            iso = val
        elif opt == "--updateto":
            try:
                updateto = UCS_Version(val)
                updateto_args = ['--updateto', val]
            except ValueError as e:
                dprint("%s" % e)
                sys.exit(2)
        elif opt == '--reboot':
            dprint('Warning: --reboot is deprecated; value is ignored.')
        elif opt == "--no-clean":
            clean = False
            dprint("Running updater without apt-get clean")
        elif opt == '--check':
            try:
                nextversion = update_available(command, ucr, cdrom_mount_point, iso=iso)
                if nextversion:
                    dprint('Next version is %s' % nextversion)
                    sys.exit(1)
            except UpdateError as msg:
                dprint("Error: %s" % msg)
                print('Error: Please check "%s" for details.' % LOGNAME, file=sys.stderr)
                # Errors are handled as "update currently no available"
            except RequiredComponentError as ex:
                dprint("%s" % ex)
            else:
                dprint('System is up to date')  # Sync with /etc/cron.d/univention-maintenance
            sys.exit(0)
        elif opt == '--ignore-releasenotes':
            ignorereleasenotes = True
        elif opt == '--ignoressh':
            ignoressh = True
        elif opt == '--ignoreterm':
            ignoreterm = True
        elif opt == '--silent':
            global nostdout
            nostdout = True
        elif opt == '--noninteractive':
            ignorereleasenotes = True
            os.environ['UCS_FRONTEND'] = 'noninteractive'
            with open(os.path.devnull, 'r') as null:
                os.dup2(null.fileno(), sys.stdin.fileno())
        else:
            dprint('Unknown parameter: "%s"' % opt)
            sys.exit(2)

    deactivateSourcesListMethods(methods=['cdrom'])

    vv = ucr['version/version']
    vp = ucr['version/patchlevel']

    lastversion = '%s-%s' % (vv, vp)
    nextversion = None

    # Bug #51880: if last postup.sh failed
    last_status = get_status()
    if last_status.get('status') == 'FAILED' and last_status.get('errorsource') == 'POSTUP':
        dprint("ERROR: The postup.sh of the last update was not executed successfully.")
        dprint("       Please check https://help.univention.com/t/what-to-do-if-postup-failed/15885 for further information.")
        dprint("       The update can be started after the postup.sh has been successfully re-executed and ")
        dprint("       /var/lib/univention-updater/univention-updater.status has been removed.")
        sys.exit(1)

    update_status(current_version=lastversion, type=command.upper(), status='RUNNING', phase='PREPARATION')

    log('Version=%s' % vv)
    log('Patchlevel=%s' % vp)

    if command == 'local':
        log('starting local mode')
        updater = LocalUpdater()
        nextversion = update_available('local', ucr, cdrom_mount_point, iso=iso, updater=updater)
    elif command == 'cdrom':
        log('starting cdrom mode')
        if iso:
            device_name = "ISO image"
        else:
            device_name = "cdrom"
        updater = LocalUpdater()
        nextversion = update_available('cdrom', ucr, cdrom_mount_point, iso=iso)
    elif command == 'net':
        log('starting net mode')
        # if ucr.is_true('local/repository', False):
        #   log('local/repository active, copy from net and start local mode')
        #   resultCode = subprocess.call( [ '/usr/sbin/univention-repository-update', 'net' ] + updateto_args )
        #   if resultCode != 0:
        #     fp_debug.close()
        #     raise UpdateError('Failed to execute "univention-repository-update net"', errorsource='PREPARATION')
        #   call_local(updateto=updateto, clean=clean, ignoressh=ignoressh,
        # ignoreterm=ignoreterm, ignorereleasenotes=ignorereleasenotes)
        updater = UniventionUpdater()
        nextversion = update_available('net', ucr, cdrom_mount_point, iso=iso, updater=updater)
    else:
        dprint('Unknown mode: %s' % command)
        sys.exit(1)

    if not nextversion:
        dprint('System is up to date (UCS %s)' % lastversion)
        fp_debug.close()
        raise UpToDateNoError()

    new_version = UCS_Version(nextversion)
    if updateto and new_version > updateto:
        dprint('Update hold at %s, next %s is after %s' % (lastversion, new_version, updateto))
        fp_debug.close()
        raise UpToDateNoError()

    dprint('Update to = %s' % nextversion)
    update_status(next_version=nextversion)
    if updateto:
        update_status(target_version=updateto)

    if ignorereleasenotes:
        os.putenv('update_warning_releasenotes_internal', 'no')
    if ignoressh:
        os.putenv('update%d%d_ignoressh' % (new_version.major, new_version.minor, ), 'yes')
    if ignoreterm:
        os.putenv('update%d%d_ignoreterm' % (new_version.major, new_version.minor, ), 'yes')

    if command == 'cdrom':
        if ucr.is_true('local/repository', False):
            log('local/reposity active, copy %s and start local mode' % device_name)
            if iso:
                resultCode = subprocess.call(['/usr/sbin/univention-repository-update', 'cdrom', '--cdrom', cdrom_mount_point, '--iso', iso] + updateto_args)
            else:
                resultCode = subprocess.call(['/usr/sbin/univention-repository-update', 'cdrom', '--cdrom', cdrom_mount_point] + updateto_args)

            if resultCode != 0:
                fp_debug.close()
                raise UpdateError('Failed to execute "univention-repository-update cdrom"', errorsource='UPDATE')

            call_local(updateto=updateto, clean=clean, ignoressh=ignoressh, ignoreterm=ignoreterm, ignorereleasenotes=ignorereleasenotes)
        else:
            dprint('Error: You are trying to install from a cdrom/dvd image')
            dprint('       but a local repository was not found. If you want to')
            dprint('       update via an ISO image you need to create a local')
            dprint('       repository (/usr/sbin/univention-repository-create)')
            dprint('       or try to install via "univention-updater net"')
            sys.exit(1)

    add_temporary_sources_list(updater.release_update_temporary_sources_list(nextversion))
    try:
        phase = 'preup'
        update_status(phase='PREUP')

        rel = updater._iterate_version_repositories(new_version, new_version, ('maintained',), [])

        components = updater.get_components()
        # components = filter(lambda c: 'current' in ucr.get('repository/online/component/%s/version' % c, '').split(','), components)
        com = updater._iterate_component_repositories(components, new_version, new_version, [])

        repos = itertools.chain(rel, com)
        scripts = updater.get_sh_files(repos, ucr.is_true('repository/online/verify', True))
        for phase, order in updater.call_sh_files(scripts, LOGNAME, str(new_version)):
            # do not switch back and forth between PRE and UPDATE phase resp. UPDATE and POST phase.
            if (phase, order) not in (
                    ('update', 'pre'),
                    ('update', 'post'),
            ):
                update_status(phase=phase.upper())

            if (phase, order) == ('update', 'pre'):
                log('**** Downloading scripts at %s' % datetime.datetime.now().ctime())
            elif (phase, order) == ('preup', 'pre'):
                log('**** Starting actual update at %s' % datetime.datetime.now().ctime())
            elif (phase, order) == ('update', 'main'):
                count = 300
                while os.path.exists('/var/run/apt-get.lock') and count > 0:
                    time.sleep(1)
                    count -= 1

                # TODO: should we really exit if the 'apt-get update' process failed?
                resultCode = os.system('touch /var/run/apt-get.lock && %s >>%s 2>&1' % (cmd_update, LOGNAME))
                if os.path.exists('/var/run/apt-get.lock'):
                    os.unlink('/var/run/apt-get.lock')
                if resultCode != 0:
                    raise UpdateError('Failed to execute "%s"' % cmd_update, errorsource='UPDATE')

                # Execute the dist-upgrade!
                count = 300
                while os.path.exists('/var/run/apt-get.lock') and count > 0:
                    time.sleep(1)
                    count -= 1

                detailed_status = FN_STATUS + '.details'
                context_id = write_event(UPDATE_STARTED, {'hostname': ucr.get('hostname')})
                if context_id:
                    os.environ['ADMINDIARY_CONTEXT'] = context_id
                with open(detailed_status, 'w+b') as detailed_status_fd:
                    resultCode = os.system('touch /var/run/apt-get.lock && DEBIAN_FRONTEND=noninteractive %s -o APT::Status-FD=%s >>%s 2>&1' % (cmd_dist_upgrade, detailed_status_fd.fileno(), LOGNAME))
                    if os.path.exists(detailed_status):
                        os.unlink(detailed_status)
                    if os.path.exists('/var/run/apt-get.lock'):
                        os.unlink('/var/run/apt-get.lock')
                    if resultCode != 0:
                        raise UpdateError('Failed to execute "%s"' % cmd_dist_upgrade, errorsource='UPDATE')
            elif (phase, order) == ('postup', 'main'):
                # Bug #23202: After the update from Python2.4 to Python2.6, ucr.handler_set() does not work any more because it still uses python2.4!
                (nvv, nvp) = nextversion.split('-')[0:2]
                subprocess.call(('univention-config-registry', 'set', 'version/version=%s' % nvv, 'version/patchlevel=%s' % nvp), stdout=fp_debug, stderr=fp_debug)

    except BaseException:
        if phase == 'preup' or (phase == 'update' and order == 'pre'):
            remove_temporary_sources_list()
        raise

    remove_temporary_sources_list()

    if os.path.exists('/usr/sbin/univention-pkgdb-scan'):
        os.system('/usr/sbin/univention-pkgdb-scan >>%s 2>&1' % LOGNAME)

    if clean:
        subprocess.call(['apt-get', 'clean'])

    if os.path.exists(failure):
        os.unlink(failure)
    subprocess.call(['touch', reboot_required])
    update_status(status='DONE')
    write_event(UPDATE_FINISHED_SUCCESS, {'hostname': ucr.get('hostname'), 'version': 'UCS %(version/version)s-%(version/patchlevel)s errata%(version/erratalevel)s' % ucr})
    os.execv(sys.argv[0], sys.argv)


if __name__ == '__main__':
    if '-h' in sys.argv or '-?' in sys.argv or '--help' in sys.argv:
        usage()
        sys.exit(0)

    do_ucr_update = True

    fd_log = open(LOGNAME, 'a+')
    try:
        try:
            try:
                with UpdaterLock():
                    main()
            except VerificationError as ex:
                msg = '\n'.join([
                    "Update aborted due to verification error:",
                    "%s" % (ex,),
                ] + wrap(dedent(
                    """\
                    This can and should only be disabled temporarily
                    using the UCR variable 'repository/online/verify'.
                    """
                )))
                raise UpdateError(msg, errorsource='SETTINGS')
            except ConfigurationError as e:
                msg = 'Update aborted due to configuration error: %s' % e
                raise UpdateError(msg, errorsource='SETTINGS')
            except RequiredComponentError as ex:
                update_status(status='DONE', errorsource='PREPARATION')
                dprint("%s" % ex)
            except PreconditionError as ex:
                (phase, order, component, script) = ex.args
                if phase == 'preup':
                    phase = 'pre-update'
                    errorsource = 'PREUP'
                elif phase == 'postup':
                    phase = 'post-update'
                    errorsource = 'POSTUP'
                else:
                    errorsource = 'UPDATE'

                if order == 'main':
                    order = 'release %s' % component
                elif order == 'pre':
                    order = 'component %s before calling release script' % component
                elif order == 'post':
                    order = 'component %s after calling release script' % component

                msg = 'Update aborted by %s script of %s' % (phase, order)
                raise UpdateError(msg, errorsource=errorsource)
        except UpdateError as msg:
            ucr = ConfigRegistry()
            ucr.load()
            write_event(UPDATE_FINISHED_FAILURE, {'hostname': ucr.get('hostname')})
            if msg.errorsource:
                update_status(status='FAILED', errorsource=msg.errorsource)
            else:
                update_status(status='FAILED')
            dprint("Error: %s" % msg)
            print('Error: Please check "%s" for details.' % LOGNAME, file=sys.stderr)
            subprocess.call(['touch', failure])
            # disable update of UCR variable update/available to prevent call loop of univention-updater
            # (update_ucr_updatestatus() calls indirectly univention-updater which calls update_ucr_updatestatus() .... )
            do_ucr_update = False
            sys.exit(1)
        except KeyboardInterrupt:
            update_status(status='FAILED')
            dprint("\nUpdate aborted by user (ctrl-c)\n")
            # disable update of UCR variable update/available to prevent call loop of univention-updater
            # (update_ucr_updatestatus() calls indirectly univention-updater which calls update_ucr_updatestatus() .... )
            do_ucr_update = False
            sys.exit(1)
        except UpToDateNoError as error:
            update_status(status='DONE')
            if os.path.exists(failure):
                os.unlink(failure)
            sys.exit(0)
        except SystemExit:
            # disable update of UCR variable update/available to prevent call loop of univention-updater
            # (update_ucr_updatestatus() calls indirectly univention-updater which calls update_ucr_updatestatus() .... )
            do_ucr_update = False
            raise
    finally:
        if do_ucr_update:
            update_ucr_updatestatus()
        fd_log.close()
