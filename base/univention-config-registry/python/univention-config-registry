#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention Configuration Registry
#  start script
#
# Copyright 2004-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.
from __future__ import print_function
import locale
import os
import sys

import six
import univention.config_registry as ub


def convertToUtf8(arguments):
	"""
	Try to decode as UTF-8, then try to decode with locale encoding. If decoded successfully encode with UTF-8.

	:param arguments: List of command line arguments.
	:returns: List of command line arguments.
	"""
	if six.PY3:
		return arguments  # Python 3, we already have "unicode" objects
	localeencoding = locale.getpreferredencoding()
	new_arguments = []
	for argument in arguments:
		try:
			argument = argument.decode('UTF-8').encode('UTF-8')
		except UnicodeError:
			try:
				argument = argument.decode(localeencoding).encode('UTF-8')
			except UnicodeError:
				pass
		new_arguments.append(argument)
	return new_arguments


if __name__ == '__main__' and not os.path.exists('/etc/univention/disable_baseconfig') and not os.path.exists('/etc/univention/disable_config_registry'):
	if os.path.basename(sys.argv[0]) == 'univention-baseconfig':
		print('WARNING: univention-baseconfig is deprecated by univention-config-registry.', file=sys.stderr)
	try:
		ub.main(convertToUtf8(sys.argv[1:]))
	except ub.StrictModeException as e:
		print('Error: UCR is running in strict mode and thus cannot accept the given input:')
		print(e)
		sys.exit(1)
