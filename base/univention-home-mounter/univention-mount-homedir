#!/usr/bin/python2.7
#
# Univention Home Mounter
#  mount the homedir
#
# Copyright 2004-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import ldap.filter
import os
import pwd
import socket
import stat
import subprocess
import sys
import syslog
import time

import univention.uldap

MOUNTS_FILE = '/var/lib/univention-home-mounter/mounts'

NEW_HOME_DIR_MODE = stat.S_IRWXU | stat.S_IXGRP | stat.S_IXOTH


def hostname_short():
	'''return first part of hostname (like "hostname -s")'''
	return socket.gethostname().split('.', 1)[0]


def hostname_fqdn():
	'''return full hostname (like "hostname -f")'''
	return socket.getfqdn()


def get_homeattr(username):
	'''return automountInformation of <username>, if any'''
	try:
		connection = univention.uldap.getMachineConnection(ldap_master=False, reconnect=False)
	except TypeError:
		# old version of univention.uldap
		connection = univention.uldap.getMachineConnection(ldap_master=False)
	except Exception:
		return
	search_filter = ldap.filter.filter_format(
		"(&(objectClass=posixAccount)(objectClass=automount)(uid=%s))",
		(username, )
	)
	for _, attributes in connection.search(filter=search_filter, attr=['automountInformation'], sizelimit=1):
		for info in attributes.get('automountInformation', []):
			return info
	return None


def get_username():
	'''return the username to use (first argument if exists else USER environment variable)'''
	try:
		return sys.argv[1]
	except IndexError:
		return os.environ['USER']


def get_userinfo():
	'''return passwd information of the user to be used'''
	try:
		return pwd.getpwnam(get_username())
	except KeyError:
		return None


def userinfo_is_usable(user):
	'''test for empty/unusable passwd information'''
	return user is not None and user.pw_name and user.pw_dir


def is_system(user):
	'''check UID to see if <user> is a domain user or local/system user'''
	return user.pw_uid < 1000


def create_home(owner):
	'''create home directory for <owner> if not exists'''
	if not os.path.exists(owner.pw_dir):
		syslog.syslog("Creating home directory %r" % (owner.pw_dir, ))
		os.makedirs(owner.pw_dir)
		os.chown(owner.pw_dir, owner.pw_uid, owner.pw_gid)
		os.chmod(owner.pw_dir, NEW_HOME_DIR_MODE)


def parse_automount(information):
	'''parse automountInformation string into (flags, host, path)'''
	if information.startswith('-'):
		flags, unc = information.split(None, 1)
	else:
		flags = ""
		unc = information
	if ':' in unc:
		host, path = unc.split(':', 1)
		return (flags, host, path, )
	return (None, None, None, )


def mount_nfs_home(host, path, mount_point):
	'''mount NFS home share <path> from <host> on <mount_point>'''
	if subprocess.call(('mount', '-t', 'nfs', '%s:%s' % (host, path, ), mount_point, )) == 0:
		with open(MOUNTS_FILE, 'ab') as mounts:
			mounts.write('%s %d\n' % (mount_point, time.time(), ))
		return True
	return False


def main():
	'''main method'''
	syslog.openlog('univention-mount-homedir')
	user = get_userinfo()
	if not userinfo_is_usable(user):
		sys.exit(1)
	if is_system(user) or os.path.ismount(user.pw_dir):
		sys.exit(0)
	homeattr = get_homeattr(user.pw_name)
	if not homeattr:
		create_home(user)
		sys.exit(0)
	else:
		(_, host, path, ) = parse_automount(homeattr)
		if not host or not path:
			syslog.syslog("Bad information in LDAP. Not mounting home directory.")
			sys.exit(1)
		if host in (hostname_fqdn(), hostname_short(), ) and os.path.realpath(path) == os.path.realpath(user.pw_dir):
			syslog.syslog("Home directory is local.")
			sys.exit(0)
		create_home(user)
		if not mount_nfs_home(host, path, user.pw_dir):
			syslog.syslog("Failed to mount home directory: %r" % (user.pw_dir, ))
			sys.exit(1)


if __name__ == "__main__":
	main()
