<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE appendix [
	<!ENTITY % extensions SYSTEM "../../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<appendix id="chap:debian"><title>Debian packaging
		<indexterm>
			<primary>Packaging</primary><secondary>Debian</secondary>
		</indexterm>
	</title>

	<para>
		This chapter describes how software for &ucsUCS; is packaged in the Debian format.
		It allows proper dependency handling and guarantees proper tracking of file ownership.
		Customers can package their own internal software or use the package mechanism to distribute configuration files consistently to different machines.
	</para>
	<para>
		Software is packaged as a <emphasis>source package</emphasis><indexterm><primary>Package</primary><secondary>source-</secondary></indexterm>, from which one or more <emphasis>binary packages</emphasis><indexterm><primary>Package</primary><secondary>binary-</secondary></indexterm> can be created.
		This is useful to create different packages from the same source package.
		For example the <application>Samba</application> source package creates multiple binary packages: one containing the file server, one containing the client commands to access the server, and several other packages containing documentation, libraries, and common files shared between those packages,
		The directory should be named <filename class="directory"><replaceable>package_name</replaceable>-<replaceable>version</replaceable></filename>.
	</para>

	<section id="deb:prerequisites">
		<title>Prerequisites and preparation
			<indexterm><primary>Packaging</primary><secondary>Build dependencies</secondary></indexterm>
		</title>
		<para>
			Some packages are required for creating and building packages.
		</para>
		<variablelist>
			<varlistentry><term><package>build-essential</package></term>
				<listitem>
					<para>
						This meta package depends on several other packages like compilers and tools to extract and build source packages.
						Packages must not declare an explicit dependency on this and its dependent packages.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><package>devscripts</package></term>
				<listitem>
					<para>
						This package contains additional scripts to modify source package files like for example <filename>debian/changelog</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><package>dh-make</package></term>
				<listitem>
					<para>
						This program helps to create an initial <filename class="directory">debian/</filename> directory, which can be used as a starting point for packaging new software.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			These packages must be installed on the development system.
			For this the <emphasis>unmaintained</emphasis> repository must be enabled.
			After this the missing packages can be installed on the command line using <command>univention-install</command> or through UMC, which is described in the <biblioref linkend="ucs-handbuch"/>.
		</para>
	</section>

	<section id="deb:dhmake">
		<title>
			<command>dh_make</command>
		</title>
		<para>
			<command>dh_make</command> is a tool, which helps creating the initial <filename class="directory">debian/</filename> directory.
			It is interactive by default and asks several questions about the package to be created.
		</para>
		<screen><![CDATA[
Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?
[s/i/m/l/k/n]
		]]></screen>
		<variablelist>
			<varlistentry>
				<term><keycap>s</keycap>, single binary</term>
				<listitem>
					<para>
						A single architecture specific binary package is created from the source package.
						This is for software which needs to be compiled individually for different CPU architectures like <literal>i386</literal> and <literal>amd64</literal>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><keycap>i</keycap>, indep binary</term>
				<listitem>
					<para>
						A single architecture-independent binary package is created from the source package.
						This is for software which runs unmodified on all CPU architectures.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><keycap>m</keycap>, multiple binary</term>
				<listitem>
					<para>Multiple binary package are created from the source package, which can be both architecture independent and dependent.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><keycap>l</keycap>, library</term>
				<listitem>
					<para>
						Two or more binary packages are created for a compiled library package.
						The runtime package consists of the shared object file, which is required for running programs using that library.
						The development package contains the header files and other files, which are only needed when compiling and linking programs on a development system.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><keycap>k</keycap>, kernel module</term>
				<listitem>
					<para>
						A single kernel-dependent binary package is created from the source package.
						Kernel modules need to be compiled for each kernel flavor.
						<package>dkms</package> should probably be used instead.
						This type of packages is not described in this manual.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><keycap>n</keycap>, kernel patch</term>
				<listitem>
					<para>
						A single kernel-independent package is created from the source package, which contains a patch to be applied against an unpacked Linux kernel source tree.
						<package>dkms</package> should probably be used instead.
						This type of packages is not described in this manual.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			In Debian a package normally consists of an upstream software archive, which is provided by a third party like the Samba team.
			This collection is extended by a Debian specific second <acronym>TAR</acronym> archive or a patch file, which adds the <filename class="directory">debian/</filename> directory and might also modify upstream files for better integration into a Debian system.
		</para>
		<para>
			When a source package is built, <citerefentry><refentrytitle>dpkg-source</refentrytitle><manvolnum>1</manvolnum></citerefentry> separates the files belonging to the packaging process from files belonging to the upstream package.
			For this to work, <command>dpkg-source</command> needs the original source either provided as a <acronym>TAR</acronym> archive or a separate directory containing the unpacked source.
			If neither of these is found and <option>--native</option> is not given, <command>dh_make</command> prints the following warning:
		</para>
		<screen><![CDATA[
Could not find my-package_1.0.orig.tar.gz
Either specify an alternate file to use with -f,
or add --createorig to create one.
		]]></screen>
		<para>
			The warning from <command>dh_make</command> states that no pristine upstream archive was found, which prohibits the creation of the Debian specific patch, since the Debian packaging tools have no way to separate upstream files from files specific to Debian packaging.
			The option <option>--createorig</option> can be passed to <command>dh_make</command> to create a <filename class="extension">.orig.tar.gz</filename> archive before creating the <filename class="directory">debian/</filename> directory, if such separation is required.
		</para>
	</section>

	<section id="deb:debian"><title>Debian control files</title>
		<para>
			The control files in the <filename class="directory">debian/</filename> directory control the package creation process.
			The following sections provide a short description of these files.
			A more detailed description is available in the <biblioref linkend="Debian:pkg_basics"/>.
		</para>
		<para>
			Several files will have the <filename class="extension">.ex</filename> suffix, which mark them as examples.
			To activate these files, they must be renamed by stripping this suffix.
			Otherwise the files should be deleted to not clutter up the directory by unused files.
			In case a file was deleted and needs to be restored, the original templates can be found in the <filename class="directory">/usr/share/debhelper/dh_make/debian/</filename> directory.
		</para>
		<para>
			The <filename class="directory">debian/</filename> directory contains some global configuration files, which can be put into two categories:
			The files <filename>changelog</filename>, <filename>control</filename>, <filename>copyright</filename>, <filename>rules</filename> are required and control the build process of all binary packages.
			Most other files are optional and only affect a single binary package.
			Their filename is prefixed with the name of the binary package,
			<footnote>
				<para>
					If only a single binary package is build from the source package, this prefix can be skipped, but it is good practice to always use the prefix.
				</para>
			</footnote>
		</para>
		<para>
			The following files are required:
		</para>
		<variablelist>
			<varlistentry><term><filename>changelog</filename></term>
				<listitem>
					<para>
						Changes related to packaging, not the upstream package.
						See <xref linkend="deb:changelog"/> below for more information.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename>compat</filename></term>
				<listitem>
					<para>
						The <application>Debhelper</application> tools support different compatibility levels.
						For UCS-3.x the file must contain a single line with the value <literal>7</literal>.
						See <citerefentry><refentrytitle>debhelper</refentrytitle><manvolnum>7</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename>control</filename></term>
				<listitem>
					<para>
						Contains control information about the source and all its binary packages.
						This mostly includes package name and dependency information.
						See <xref linkend="deb:control"/> below for more information.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename>copyright</filename></term>
				<listitem>
					<para>
						This file contains the copyright and license information for all files contained in the package.
						See <xref linkend="deb:copyright"/> below for more information.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename>rules</filename></term>
				<listitem>
					<para>
						This is a Makefile style file, which controls the package build process.
						See <xref linkend="deb:rules"/> below for more information.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename>source/format</filename></term>
				<listitem>
					<para>
						This file configures how <citerefentry><refentrytitle>dpkg-source</refentrytitle><manvolnum>1</manvolnum></citerefentry> separates the files belonging to the packaging process from files belonging to the upstream package.
						Historically the Debian source format <literal>1.0</literal> shipped packages as a <acronym>TAR</acronym> file containing the upstream source plus one patch file, which contained all files of the <filename class="directory">debian/</filename> sub-directory in addition to all changes to upstream files.
					</para>
					<para>
						The new format <literal>3.0 (quilt)</literal> replaces the patch file with a second <acronym>TAR</acronym> archive containing the <filename class="directory">debian/</filename> directory.
						Changes to upstream files are no longer applied as one giant patch, but split into logical changes and applied using a built-in <citerefentry><refentrytitle>quilt</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
					</para>
					<para>
						For simple packages, where there is no distinction between upstream and the packaging entity, the <literal>3.0 (native)</literal> format can be used instead, were all files including the <filename class="directory">debian/</filename> directory are contained in a single <acronym>TAR</acronym> file.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			The following files are optional and should be deleted if unused, which helps other developers to concentrate on only the files relevant to the packaging process:
		</para>
		<variablelist>
			<varlistentry><term><filename>README.Debian</filename></term>
				<listitem>
					<para>
						Notes regarding package specific changes and differences to default options, for example compiler options.
						Will be installed into <filename class="directory">/usr/share/doc/<replaceable>package_name</replaceable>/README.Debian</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.cron.d</filename></term>
				<listitem>
					<para>
						Cron tab entries to be installed.
						See <citerefentry><refentrytitle>dh_installcron</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.dirs</filename></term>
				<listitem>
					<para>
						List of extra directories to be created.
						See <citerefentry><refentrytitle>dh_installdirs</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
						<footnote>
							<simpara>
								May other <command>dh_</command> tools automatically create directories themselves, so in most cases this file is unneeded.
							</simpara>
						</footnote>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.install</filename></term>
				<listitem>
					<para>
						List of files and directories to be copied into the package.
						This is normally used to partition all files to be installed into separate packages, but can also be used to install arbitrary files into packages.
						See <citerefentry><refentrytitle>dh_install</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.docs</filename></term>
				<listitem>
					<para>
						List of documentation files to be installed in <filename class="directory">/usr/share/doc/<replaceable>package</replaceable>/</filename>.
						See <citerefentry><refentrytitle>dh_installdocs</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.emacsen-install</filename></term>
				<term><filename><replaceable>package</replaceable>.emacsen-remove</filename></term>
				<term><filename><replaceable>package</replaceable>.emacsen-startup</filename></term>
				<listitem>
					<para>
						Emacs specific files to be installed below <filename class="directory">/usr/share/emacs-common/<replaceable>package</replaceable>/</filename>.
						See <citerefentry><refentrytitle>dh_installemacsen</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.doc-base*</filename></term>
				<listitem>
					<para>
						Control files to install and register extended HTML and PDF documentation.
						See <citerefentry><refentrytitle>dh_installdocs</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.init.d</filename></term>
				<term><filename><replaceable>package</replaceable>.default</filename></term>
				<listitem>
					<para>
						Start-/stop script to manage a system daemon or service.
						See <citerefentry><refentrytitle>dh_installinit</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.manpage.<replaceable>1</replaceable></filename></term>
				<term><filename><replaceable>package</replaceable>.manpage.sgml</filename></term>
				<listitem>
					<para>
						Manual page for programs, library functions or file formats, either directly in <acronym>troff</acronym> or <acronym>SGML</acronym>.
						See <citerefentry><refentrytitle>dh_installman</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.menu</filename></term>
				<listitem>
					<para>
						Control file to register programs with the Debian menu system.
						See <citerefentry><refentrytitle>dh_installmenu</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename>watch</filename></term>
				<listitem>
					<para>
						Control file to specify the download location of this upstream package.
						This can be used to check for new software versions.
						See <citerefentry><refentrytitle>uscan</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more details.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.preinst</filename></term>
				<term><filename><replaceable>package</replaceable>.postinst</filename></term>
				<term><filename><replaceable>package</replaceable>.prerm</filename></term>
				<term><filename><replaceable>package</replaceable>.postrm</filename></term>
				<listitem>
					<para>
						Scripts to be executed before and after package installation and removal.
						See <xref linkend="deb:scripts"/> below for more information.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry><term><filename><replaceable>package</replaceable>.maintscript</filename></term>
				<listitem>
					<para>
						Control file to simplify the handling of <firstterm>conffile</firstterm>s.
						See <citerefentry><refentrytitle>dpkg-maintscript-helper</refentrytitle><manvolnum>1</manvolnum></citerefentry> and <citerefentry><refentrytitle>dh_installdeb</refentrytitle><manvolnum>1</manvolnum></citerefentry> for more information.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Other <application>debhelper</application> programs use additional files, which are described in the respective manual pages.
		</para>

		<section id="deb:control"><title>debian/control</title>
			<para>
				The <filename>control</filename> file contains information about the packages and their dependencies, which is needed by <command>dpkg</command>.
				The initial <filename>control</filename> file created by <command>dh_make</command> looks like this:
			</para>
			<programlisting><![CDATA[
Source: testdeb
Section: unknown
Priority: optional
Maintainer: John Doe <user@example.com>
Build-Depends: debhelper (>= 5.0.0)
Standards-Version: 3.7.2

Package: testdeb
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: <insert up to 60 chars description>
<insert long description, indented with spaces>
			]]></programlisting>
			<para>
				The first block beginning with <literal>Source</literal> describes the source package:
			</para>
			<variablelist>
				<varlistentry><term><literal>Source</literal></term>
					<listitem>
						<para>
							The name of the source package.
							Must be consistent with the directory name of the package and the information in the <filename>changelog</filename> file.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><ulink url="http://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections"><literal>Section</literal></ulink></term>
					<listitem>
						<para>
							A category name, which is used to group packages.
							There are many predefined categories like <literal>libs</literal>, <literal>editors</literal>, <literal>mail</literal>, but any other string can be used to define a custom group.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><ulink url="http://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities"><literal>Priority</literal></ulink></term>
					<listitem>
						<para>
							Defines the priority of the package.
							This information is only used by some tools to create installation DVD.
							More important packages are put on earlier CD, while less important packages are put on later CD.
						</para>
						<variablelist>
							<varlistentry><term><literal>essential</literal></term>
								<listitem>
									<para>
										Packages are installed by default and <command>dpkg</command> prevents the user from easily removing it.
									</para>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>required</literal></term>
								<listitem>
									<para>
										Packages which are necessary for the proper functioning of the system.
										The package is part of the base installation.
									</para>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>important</literal></term>
								<listitem>
									<para>
										Important programs, including those which one would expect to find on any Unix-like system.
										The package is part of the base installation.
									</para>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>standard</literal></term>
								<listitem>
									<para>
										These packages provide a reasonably small but not too limited character-mode system.
									</para>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>optional</literal></term>
								<listitem>
									<para>
										Package is not installed by default.
										This level is recommended for most packages.
									</para>
								</listitem>
							</varlistentry>
							<varlistentry><term><literal>extra</literal></term>
								<listitem>
									<para>
										This contains all packages that conflict with some other packages.
									</para>
								</listitem>
							</varlistentry>
						</variablelist>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Maintainer</literal></term>
					<listitem>
						<para>
							The name and email address of a person or group responsible for the packaging.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Build-Depends</literal></term>
					<term><literal>Build-Depends-Indep</literal></term>
					<listitem>
						<para>
							A list of packages which are required for building the package.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Standards-version</literal></term>
					<listitem>
						<para>
							Specifies the Debian Packaging Standards version, which this package is conforming to.
							This is not used by <acronym>UCS</acronym>, but required by Debian.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				All further blocks beginning with <literal>Package</literal> describes a binary package.
				For each binary package one block is required.
			</para>
			<variablelist>
				<varlistentry><term><literal>Package</literal></term>
					<listitem>
						<para>
							The name of the binary package.
							The name must only consist of lower case letters, digits and dashes.
							If only a single binary package is build from a source package, the name is usually the same as the source package name.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Architecture</literal></term>
					<listitem>
						<para>
							Basically there are two types of packages:
							Architecture dependent packages must be build for each architecture like <literal>i386</literal> and <literal>amd64</literal>, since binaries created on one architecture do not run on other architectures.
							A list of architectures can be explicitly given, or <literal>any</literal> can be used, which is then automatically replaced by the architecture of the system where the package is built.
						</para>
						<para>
							Architecture independent packages only need to be built once, but can be installed on all architectures.
							Examples are documentation, scripts and graphics files.
							They are declared using <literal>all</literal> in the architecture field.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Description</literal></term>
					<listitem>
						<para>
							The first line should contain a short description of up to 60 characters, which should describe the purpose of the package sufficiently.
							A longer description can be given after that, where each line is indented by a single space.
							An empty line can be inserted by putting a single dot after the leading space.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				Most packages are not self-contained but need other packages for proper function.
				Debian supports different kinds of dependencies.
			</para>
			<variablelist>
				<varlistentry><term><literal>Depends</literal></term>
					<listitem>
						<para>
							A essential dependency on some other packages, which must be already installed and configured before this package is configured.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Recommends</literal></term>
					<listitem>
						<para>
							A strong dependency on some other packages, which should normally be co-installed with this package, but can be removed.
							This is useful for additional software like plug-ins, which extends the functionality of this package, but is not strictly required.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Suggests</literal></term>
					<listitem>
						<para>
							A soft dependency on some other packages, which are not installed by default.
							This is useful for additional software like large add-on packages and documentation, which extends the functionality of this package, but is not strictly required.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Pre-Depends</literal></term>
					<listitem>
						<para>
							A strong dependency on some other package, which must be fully operational even before this package is unpacked.
							This kind of dependency should be used very sparsely.
							It's mostly only required for software called from the <filename>.preinst</filename> script.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Conflicts</literal></term>
					<listitem>
						<para>
							A negative dependency, which prevents the package to be installed while the other package is already installed.
							This should be used for packages, which contain the same files or use the same resources, for example TCP port numbers.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Provides</literal></term>
					<listitem>
						<para>
							This package declares, that it provides the functionality of some other package and can be considered as a replacement for that package.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Replaces</literal></term>
					<listitem>
						<para>
							A declaration, that this package overwrites the files contained in some other package.
							This deactivates the check normally done by <command>dpkg</command> to prevent packages from overwriting files belonging to some other package.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry><term><literal>Breaks</literal></term>
					<listitem>
						<para>
							A negative dependency, which requests the other package to be upgraded before this package can be installed.
							This is a lesser form of <literal>Conflicts</literal>.
							<literal>Breaks</literal> is almost always used with a version specification in the form <literal>Breaks: <replaceable>package</replaceable> (&lt;&lt; <replaceable>version</replaceable>)</literal>:
							This forces <replaceable>package</replaceable> to be upgraded to a version greater than <replaceable>version</replaceable> before this package is installed.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				In addition to literal package names, <application>debhelper</application> supports a substitution mechanism:
				Several helper scripts are capable of automatically detecting dependencies, which are stored in variables.
			</para>
			<variablelist>
				<varlistentry>
					<term><envar>${shlibs:Depends}</envar></term>
					<listitem><simpara><command>dh_shlibdeps</command> automatically determines the shared library used by the programs and libraries of the package and stores the package names providing them in this variable.</simpara></listitem>
				</varlistentry>
				<varlistentry>
					<term><envar>${python:Depends}</envar></term>
					<listitem><simpara><command>dh_python</command> detects similar dependencies for Python modules.</simpara></listitem>
				</varlistentry>
				<varlistentry>
					<term><envar>${misc:Depends}</envar></term>
					<listitem><simpara>Several <application>Debhelper</application> commands automatically add additional dependencies, which are stored in this variable.</simpara></listitem>
				</varlistentry>
			</variablelist>
			<para>
				In addition to specifying a single package as a dependency, multiple packages can be separated by using the pipe symbol (<literal>|</literal>).
				At least one of those packages must be installed to satisfy the dependency.
				If none of them is installed, the first package is chosen as the default.
			</para>
			<para>
				A package name can be followed by a version constraint enclosed in parenthesis.
				The following operators are valid:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>&lt;&lt;</literal></term>
					<listitem><simpara>is less than</simpara></listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>&lt;=</literal></term>
					<listitem><simpara>is less than or equal to</simpara></listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>=</literal></term>
					<listitem><simpara>is equal to</simpara></listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>&gt;=</literal></term>
					<listitem><simpara>is greater than or equal to</simpara></listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>&gt;&gt;</literal></term>
					<listitem><simpara>is greater than</simpara></listitem>
				</varlistentry>
			</variablelist>
			<para>
				An Example:
			</para>
			<programlisting><![CDATA[
Depends: libexample1 (>= ${binary:Version}),
 exim4 | mail-transport-agent,
 ${shlibs:Depends}, ${misc:Depends}
Conflicts: libgg0, libggi1
Recommends: libncurses5 (>> 5.3)
Suggests: libgii0-target-x (= 1:0.8.5-2)
Replaces: vim-python (<< 6.0), vim-tcl (<= 6.0)
Provides: www-browser, news-reader
			]]></programlisting>
		</section>

		<section id="deb:copyright"><title>debian/copyright</title>
			<para>
				The <filename>copyright</filename> file contains copyright and license information.
				For a downloaded source package it should include the download location and names of upstream authors.
			</para>
			<programlisting><![CDATA[
This package was debianized by John Doe <max@example.com> on
Mon, 21 Mar 2009 13:46:39 +0100.

It was downloaded from <fill in ftp site>

Copyright:
Upstream Author(s): <put author(s) name and email here>

License:
<Must follow here>
			]]></programlisting>
			<para>
				The file does not require any specific format.
				Debian now recommends to use a machine-readable format, but this is not required for UCS.
				The format is described in <ulink url="http://dep.debian.net/deps/dep5/"/> at looks like this:
			</para>
			<programlisting><![CDATA[
Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: Univention GmbH
Upstream-Contact: <package@univention.de>
Source: https://docs.software-univention.de/

Files: *
Copyright: 2013-2024 Univention GmbH
License: AGPL
			]]></programlisting>
		</section>

		<section id="deb:changelog"><title>debian/changelog</title>
			<para>
				The <filename>changelog</filename> file documents the changes applied to this Debian package.
				The initial file created by <command>dh_make</command> only contains a single entry and looks like this:
			</para>
			<programlisting><![CDATA[
testdeb (0.1-1) unstable; urgency=low

  * Initial Release.

 -- John Doe <user@example.com>  Mon, 21 Mar 2013 13:46:39 +0100
			]]></programlisting>
			<para>
				For each new package release a new entry must be prepended before all previous entries.
				The version number needs to be incremented and a descriptive text should be added to describe the change.
			</para>
			<para>
				The command <command>debchange</command> from the <package>devscripts</package> package can be used for editing the <filename>changelog</filename> file.
				For example the following command adds a new version:
			</para>
			<programlisting>dch -i</programlisting>
			<para>
				After that the <filename>changelog</filename> file should look like this:
			</para>
			<programlisting><![CDATA[
testdeb (0.1-2) unstable; urgency=low

  * Add more details.

 -- John Doe <user@example.com>  Mon, 21 Mar 2013 17:55:47 +0100

testdeb (0.1-1) unstable; urgency=low

  * Initial Release.

 -- John Doe <user@example.com>  Mon, 21 Mar 2013 13:46:39 +0100
			]]></programlisting>
			<para>
				The date and time stamp must follow the format described in <u:rfc>2822</u:rfc>.
				<command>debchange</command> automatically inserts and updates the current date.
				Alternatively <command>date -R</command> can be used on the command line to create the correct format.
			</para>
			<para>
				For UCS it is best practice to mention the bug ID of the UCS bug tracker (see <xref linkend="chap:bug"/>) to reference additional details of the bug fixed.
				Other parties are encouraged to devise similar comments, e.g. <acronym>URL</acronym>s to other bug tracking systems.
			</para>
		</section>

		<section id="deb:rules"><title>debian/rules</title>
			<para>
				The file <filename>rules</filename> describes the commands needed to build the package.
				It must use the <application>Make</application> syntax <biblioref linkend="make"/>.
				It consists of several rules, which have the following structure:
			</para>
			<programlisting language="make"><![CDATA[
target: dependencies
	command
	...
			]]></programlisting>
			<para>
				Each rule starts with the target name, which can be a file name or symbolic name.
				Debian requires the following targets:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>clean</literal></term>
					<listitem>
						<simpara>
							This rule must remove all temporary files created during package built and must return the state of all files back to the same state as when the package is freshly extracted.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>build</literal></term>
					<term><literal>build-arch</literal></term>
					<term><literal>build-indep</literal></term>
					<listitem>
						<simpara>
							These rules should configure the package and build either all, all architecture dependent or all architecture independent files.
							These rules are called without root permissions.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>binary</literal></term>
					<term><literal>binary-arch</literal></term>
					<term><literal>binary-indep</literal></term>
					<listitem>
						<simpara>
							These rules should install the package into a temporary staging area.
							By default this is the directory <filename class="directory">debian/tmp/</filename> below the source package root directory.
							From there files are distributed to individual packages, which are created as the result of these rules.
							These rules are called with root permissions.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				Each command line must be indented with one tabulator character.
				Each command is executed in a separate shell, but long command lines can be split over consecutive lines by terminating each line with a backslash (<literal>\</literal>).
			</para>
			<para>
				Each rule describes a dependency between the target and its dependencies.
				<command>make</command> considers a target to be out-of-date, when a file with that name <filename>target</filename> does not exists or when the file is older than one of the files it depends on.
				In that case <command>make</command> invokes the given commands to re-create the target.
			</para>
			<para>
				In addition to file names also any other word can be used for target names and in dependencies.
				This is most often used to define <quote>phony</quote> targets, which can be given on the command line invocation to trigger some tasks.
				The above mentioned <literal>clean</literal>, <literal>build</literal> and <literal>binary</literal> targets are examples for that kind of targets.
			</para>
			<para>
				<command>dh_make</command> only creates a template for the <filename>rules</filename> file.
				The initial content looks like this:
			</para>
			<programlisting><![CDATA[
#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

%:
	dh $@
			]]></programlisting>
			<para>
				Since UCS-3.0 the <filename>debian/rules</filename> file is greatly simplified by using the <command>dh</command> sequencer.
				It is a wrapper around all the different <application>debhelper</application> tools, which are automatically called in the right order.
			</para>
			<tip>
				<para>
					To exactly see which commands are executed when <command>dpkg-buildpackage</command> builds a package, invoke <command>dh <replaceable>target</replaceable> --no-act</command> by hand, for example <command>dh binary --no-act</command> lists all commands to configure, build, install and create the package.
				</para>
			</tip>
			<para>
				In most cases it's sufficient to just provide additional configuration files for the individual <application>debhelper</application> commands as described in <xref linkend="deb:debian"/>.
				If this is not sufficient, any <application>debhelper</application> command can be individually overridden by adding an <emphasis>override</emphasis> target to the <filename>rules</filename> file.
				For example the following snippet disables the automatic detection of the build system used to build the package and passes additional options:
			</para>
			<programlisting language="make"><![CDATA[
override_dh_auto_configure:
	./setup --prefix=/usr --with-option-foo
			]]></programlisting>
			<para>
				Without that explicit override <command>dh_auto_configure</command> would be called, which normally automatically detects several build systems like <application>cmake</application>, <application>setup.py</application>, <application>autoconf</application> and others. For these <command>dh</command> also passes the right options to configure the default prefix <filename class="directory">/usr</filename> and use the right compiler flags.
			</para>
			<para>
				After configuration the package is built and installed to the temporary staging area in <filename class="directory">debian/tmp/</filename>.
				From there <command>dh_install</command> partitions individual files and directories to binary packages.
				This is controlled through the <filename>debian/<replaceable>package</replaceable>.install</filename> files.
			</para>
			<para>
				This file can also be used for simple packages, where no build system is used.
				If a path given in the <filename>debian/<replaceable>package</replaceable>.install</filename> file is not found below <filename class="directory">debian/tmp/</filename>, the path is interpreted as relative to the source package root directory.
				This mechanism is sufficient to install simple files, but fails when files must be renamed or file permissions must be modified.
			</para>
		</section>

		<section id="deb:scripts"><title>debian/preinst, debian/prerm, debian/postinst, debian/postrm</title>
			<para>
				In addition to distributing only files packages can also be used to run arbitrary commands on installation, upgrades or removal.
				This is handled by the four <quote>Maintainer scripts</quote>, which are called before and after files are unpacked or removed:
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>debian/<replaceable>package</replaceable>.preinst</filename></term>
					<listitem>
						<simpara>
							called before files are unpacked.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/<replaceable>package</replaceable>.postinst</filename></term>
					<listitem>
						<simpara>
							called after files are unpacked.
							Mostly used to (re-)start services after package installation or upgrades.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/<replaceable>package</replaceable>.prerm</filename></term>
					<listitem>
						<simpara>
							called before files are removed.
							Mostly used to stop services before a package is removed or upgraded.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/<replaceable>package</replaceable>.postrm</filename></term>
					<listitem>
						<simpara>
							called after files have been removed.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The scripts themselves must be shell scripts, which should contain a <literal>#DEBHELPER#</literal> marker, where the shell script fragments created by the <command>dh_</command> programs are inserted.
				Each script is invoked with several parameters, from which the script can determine, if the package is freshly installed, upgraded from a previous version, or removed.
				The exact arguments are described in the template files generated by <command>dh_make</command>.
			</para>
			<para>
				The maintainer scripts can be called multiple times, especially when errors occur.
				Because of that the scripts should be idempotent, that is they should be written to <quote>achieve a consistent state</quote> instead of blindly doing the same sequence of commands again and again.
				A bad example would be to append some lines to a file on each invocation.
				The right approach would be to add a check, if that line was already added and only do it otherwise.
			</para>
			<warning>
				<para>
					It is important that these scripts handle error conditions properly:
					Maintainer scripts should terminate with <command>exit 0</command> on success and <command>exit 1</command> on fail, if things go catastrophically wrong.
				</para>
				<para>
					On the other hand an exit code unequal to zero usually aborts any package installation, upgrade or removal process.
					This prevents any automatic package maintenance and usually requires manual intervention of a human administrator.
					Therefore it is essential that maintainer scripts handle error conditions properly and are able to recover an inconsistent state.
				</para>
			</warning>
		</section>
	</section>

	<section id="deb:build"><title>Building</title>
		<para>
			Before the first build is started, remove all unused files from the <filename class="directory">debian/</filename> directory.
			This simplifies maintenance of the package and helps other maintainers to concentrate on only the relevant differences from standard packages.
		</para>
		<para>
			The build process is started by invoking the following command:
		</para>
		<programlisting>dpkg-buildpackage -us -uc</programlisting>
		<para>
			<!--
			The option <option>-rfakeroot</option> allows any non-root user to build the package-
			-->
			The options <option>-us</option> and <option>-uc</option> disable the PGP signing process of the source and changes files.
			This is only needed for Debian packages, were all files must be cryptographically signed to be uploaded to the Debian infrastructure.
		</para>
		<para>
			Additionally the option <option>-b</option> can be added to restrict the build process to only build the binary packages.
			Otherwise a source package will also be created.
		</para>
	</section>

	<section id="deb:links">
		<title>Further reading</title>
		<itemizedlist>
			<listitem><simpara><biblioref linkend="Debian:pkg_basics"/></simpara></listitem>
			<listitem><simpara><biblioref linkend="Debian:maint-guide"/></simpara></listitem>
			<listitem><simpara><biblioref linkend="Debian:policy"/></simpara></listitem>
			<listitem><simpara><biblioref linkend="Debian:dev-ref"/></simpara></listitem>
		</itemizedlist>
	</section>

</appendix>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
