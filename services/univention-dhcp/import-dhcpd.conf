#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention DHCP
#  migrate a dhcp conf
#
# Copyright 2004-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.


# ./import-dhcpd.conf ldapbase < dhcpd.conf > dhcpd.ldif
# dhcpd.ldif: s/255.255.255.0/24/g

import sys
import re

ldapbase = sys.argv[1]
ldapdhcpbase = 'cn=dhcp,%s' % ldapbase
ldappolicybase = 'cn=dhcp,cn=policies,%s' % ldapbase
group_count = 0


def section_name(type, args):
	global group_count
	if type == 'subnet':
		return 'subnet %s' % args[0]
	elif type == 'host':
		return 'host %s' % args[0]
	elif type == 'group':
		group_count += 1
		return 'group %d' % group_count


def print_policy(name, options):
	dn = 'cn=%s,%s' % (name, ldappolicybase)
	set = False
	for type, arg in options:
		if type == 'routers':
			attr = 'univentionDhcpRouters'
		elif type == 'domain-name-servers':
			attr = 'univentionDhcpDomainNameServers'
		elif type == 'domain-name':
			attr = 'univentionDhcpDomainName'
		elif type == 'netbios-name-servers':
			attr = 'univentionDhcpNetbiosNameServers'
		elif type == 'netbios-scope':
			attr = 'univentionDhcpNetbiosScope'
		elif type == 'netbios-node-type':
			attr = 'univentionDhcpNetbiosNodeType'
		elif type == 'max-lease-time':
			attr = 'univentionDhcpLeaseTimeMax'
		elif type == 'default-lease-time':
			attr = 'univentionDhcpLeaseTimeDefault'
		elif type == 'min-lease-time':
			attr = 'univentionDhcpLeaseTimeMin'
		elif type == 'unknown clients':
			attr = 'univentionDhcpUnknownClients'
		elif type == 'bootp':
			attr = 'univentionDhcpBootp'
		elif type == 'booting':
			attr = 'univentionDhcpBooting'
		elif type == 'duplicates':
			attr = 'univentionDhcpDuplicates'
		elif type == 'declines':
			attr = 'univentionDhcpDeclines'
		elif type == 'client-updates':
			attr = 'univentionDhcpClientUpdates'
		elif type == 'known-clcients':
			attr = 'univentionDhcpPoolKnownClients'
		elif type == 'unknown-clients':
			attr = 'univentionDhcpPoolUnknownClients'
		elif type == 'dynamic-bootp-clients':
			attr = 'univentionDhcpPoolDynamicBootpClients'
		elif type == 'authoritative':
			attr = 'univentionDhcpAuthoritative'
		elif type == 'bootp-unknown-clients':
			attr = 'univentionDhcpBootUnknownClients'
		elif type == 'ddns-hostname':
			attr = 'univentionDhcpDdnsHostname'
		elif type == 'ddns-domainname':
			attr = 'univentionDhcpDdnsDomainname'
		elif type == 'ddns-rev-domainname':
			attr = 'univentionDhcpDdnsRevDomainname'
		elif type == 'ddns-updates-style':
			attr = 'univentionDhcpDdnsUpdateStyle'
		elif type == 'ddns-updates':
			attr = 'univentionDhcpDdnsUpdate'
		elif type == 'do-forward-updates':
			attr = 'univentionDhcpDoForwardUpdates'
		elif type == 'filename':
			attr = 'univentionDhcpFilename'
		elif type == 'get-lease-hostnames':
			attr = 'univentionDhcpGetLeaseHostnames'
		elif type == 'ping-check':
			attr = 'univentionDhcpPingCheck'
		elif type == 'server-identifier':
			attr = 'univentionDhcpServerIdentifier'
		elif type == 'server-name':
			attr = 'univentionDhcpServerName'
		elif type == 'update-static-leases':
			attr = 'univentionDhcpUpdateStaticLeases'
		elif type == 'vendor-option-space':
			attr = 'univentionDhcpVendorOptionSpace'
		else:
			print >>sys.stderr, 'unknown type:', type
			continue

		if not set:
			print 'dn: %s' % dn
			print 'objectClass: top'
			print 'objectClass: univentionPolicy'
			print 'objectClass: univentionPolicyDhcp'
			print 'cn: %s' % name
			set = True

		for val in arg:
			print '%s: %s' % (attr, val)
	if set:
		print
		return dn


def section_rdn(type, arguments, name):
	if type == 'subnet':
		rdn = 'cn=%s' % arguments[0]
	elif type == 'host':
		rdn = 'cn=%s' % arguments
	elif type == 'group':
		rdn = 'ou=%s' % name
	return rdn


def get_section_dn():
	global sections
	rdns = map(lambda type_arguments_name_rdn_options: type_arguments_name_rdn_options[3], sections)
	rdns.reverse()
	return ','.join(rdns)


def print_section(type, arguments, dn, options, name, policy_dn):
	print 'dn: %s' % dn
	if type == 'subnet':
		print 'objectClass: top'
		print 'objectClass: univentionDhcpSubnet'
		print 'objectClass: univentionPolicyReference'
		print 'cn: %s' % arguments[0]
		print 'dhcpNetMask: %s' % arguments[1]
	elif type == 'host':
		print 'objectClass: top'
		print 'objectClass: univentionDhcpHost'
		print 'objectClass: univentionPolicyReference'
		print 'cn: %s' % arguments
	elif type == 'group':
		print 'objectClass: top'
		print 'objectClass: organizationalUnit'
		print 'objectClass: univentionPolicyReference'
		print 'ou: %s' % name
	else:
		print >>sys.stderr, 'ignore type:', type
		return

	for opt, vals in options:
		a = ''
		if opt == 'hardware':
			attr = 'dhcpHWAddress:'
		elif opt == 'fixed-address':
			attr = 'univentionDhcpFixedAddress:'
		elif opt == 'range':
			i, j = vals
			if j:
				a = '%s %s' % (i, j)
			else:
				a = '%s %s' % (i, i)
			attr = 'dhcpRange:'
		else:
			attr = ''
		# else:
		#	attr = 'dhcpStatements: %s'%(opt)
		if a:
			print '%s %s' % (attr, a)
			a = ''
		else:
			for val in vals:
				if attr:
					print '%s %s' % (attr, val)
				# else:
				#	print '%s %s' % (opt, val)

	if policy_dn:
		print 'univentionPolicyReference: %s' % policy_dn
	print


class regexp_match:

	def __init__(self, pattern):
		self.regexp = re.compile(pattern)

	def match(self, line):
		result = self.regexp.findall(line)
		if result:
			return result[0]
		return []


class option_match:
	comma_regexp = re.compile('[ \t]*,[ \t]*')

	def __init__(self, option):
		if option.startswith('option '):
			option = 'option[ \t]+' + option[7:]
		self.regexp = re.compile('^' + option + '[ \t]+(.+)$')

	def match(self, line):
		results = self.regexp.findall(line)
		if results:
			result = self.comma_regexp.split(results[0])
			for i in range(0, len(result)):
				if result[i][0] == '"' and result[i][-1] == '"':
					result[i] = result[i][1:-1]
			return result
		return None

# pattern


section_types = [
	('subnet', regexp_match('^subnet[ \t]+([0-9.]+)[ \t]+netmask[ \t]+([0-9.]+)$')),
	('host', regexp_match('^host[ \t]+([^ \t]+)$')),
	('group', regexp_match('^group$'))
]

option_types = [
	('routers', option_match('option routers')),
	('domain-name', option_match('option domain-name')),
	('domain-name-servers', option_match('option domain-name-servers')),
	('netbios-name-servers', option_match('option netbios-name-servers')),
	('netbios-scope', option_match('option netbios-scope')),
	('netbios-node-type', option_match('option netbios-node-type')),
	('default-lease-time', option_match('default-lease-time')),
	('max-lease-time', option_match('max-lease-time')),
	('subnet-mask', option_match('subnet-mask')),
	('broadcast-address', option_match('option broadcast-address')),
	('range', regexp_match('^range ([0-9.]+)([ \t]+[0-9.]+)?')),
	('hardware', option_match('hardware')),
	('fixed-address', option_match('fixed-address')),
	('deny', option_match('deny')),
	('allow', option_match('allow')),
	('min-lease-time', option_match('min-lease-time')),
	('unknown clients', option_match('unknown clients')),
	('bootp', option_match('bootp')),
	('booting', option_match('booting')),
	('duplicates', option_match('duplicates')),
	('declines', option_match('declines')),
	('client-updates', option_match('client-updates')),
	('known-clcients', option_match('known-clcients')),
	('unknown-clients', option_match('unknown-clients')),
	('dynamic-bootp-clients', option_match('dynamic-bootp-clients')),
	('authoritative', option_match('authoritative')),
	('bootp-unknown-clients', option_match('bootp-unknown-clients')),
	('ddns-hostname', option_match('ddns-hostname')),
	('ddns-domainname', option_match('ddns-domainname')),
	('ddns-rev-domainname', option_match('ddns-rev-domainname')),
	('ddns-updates-style', option_match('ddns-updates-style')),
	('ddns-updates', option_match('ddns-updates')),
	('do-forward-updates', option_match('do-forward-updates')),
	('filename', option_match('filename')),
	('get-lease-hostnames', option_match('get-lease-hostnames')),
	('ping-check', option_match('ping-check')),
	('server-identifier', option_match('server-identifier')),
	('server-name', option_match('server-name')),
	('update-static-leases', option_match('update-static-leases')),
	('vendor-option-space', option_match('vendor-option-space')),
]

# sections hold all sections that apply
depth = 0
sections = [['global', None, 'global', ldapdhcpbase, []]]

file = sys.stdin.read()
file = file.replace('{', '\n{\n').replace('}', '\n}\n').replace(';', '\n').replace(',\n', ',')
for line in file.split('\n'):
	pos = line.find('#')
	if pos != -1:
		line = line[:pos]
	line = line.strip()
	if not line:
		continue

	# print >>sys.stderr, 'processing:', line

	if line == '{':
		depth += 1
	elif line == '}':
		depth -= 1
		dn = get_section_dn()
		type, arguments, name, rdn, options = sections.pop()
		print >>sys.stderr, 'end section:', type

		policy_dn = print_policy(name, options)
		print_section(type, arguments, dn, options, name, policy_dn)
	else:
		found = False
		for type, pattern in section_types:
			arguments = pattern.match(line)
			if not arguments:
				continue
			name = section_name(type, arguments)
			rdn = section_rdn(type, arguments, name)
			print >>sys.stderr, 'new section: %s %s' % (type, rdn)
			sections.append((type, arguments, name, rdn, []))
			found = True
		if found:
			continue
		for type, pattern in option_types:
			result = pattern.match(line)
			if not result:
				continue
			# print >>sys.stderr, 'new option: %s result=%s'% (type, result)
			sections[depth][4].append((type, result))
			found = True
		if found:
			continue

type, arguments, name, rdn, options = sections.pop()
print_policy('global', options)
