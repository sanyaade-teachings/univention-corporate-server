#! /bin/bash
#
# Univention DHCP
#  join script
#
# Copyright 2004-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

## joinscript api: bindpwdfile

VERSION=2

. /usr/share/univention-join/joinscripthelper.lib || exit 1
joinscript_init

. /usr/share/univention-lib/all.sh

log () {
	echo "${0##*/}: $*"
}

eval "$(univention-config-registry shell)"

# Bug #23718:
# The isc-dhcpd-ldap uses a LDAP-filter like (!(|(objectClass=dhcpXXX)(...))), which returns no result if dhcpXXX is not known to the LDAP server.
# dhcpTSigKey and dhcpFailOverPeer are only defines with univention-ldap-config_8.0.34-1.
if [ 2 -ne "$(univention-ldapsearch -LLL -b 'cn=Subschema' -s base objectClasses | ldapsearch-wrapper | egrep -c "objectClasses: \( [0-9.]+ NAME '(dhcpTSigKey|dhcpFailOverPeer)'")" ]
then
	echo "The LDAP schema for DHCP is too old." >&2
	echo "objectClasses 'dhcpTSigKey' and 'dhcpFailOverPeer' are not found." >&2
	echo "Make sure univention-ldap-config (from UCS-2.4-4 or later) is installed." >&2
	exit 1
fi

univention-directory-manager dhcp/service create "$@" --ignore_exists \
	--position "cn=dhcp,$ldap_base" \
	--set service="$domainname" || die
SERVICE="cn=$domainname,cn=dhcp,$ldap_base"
univention-directory-manager dhcp/server create "$@" --ignore_exists \
	--superordinate "$SERVICE" \
	--set server="$hostname" || die

# Reference policies only for the first DHCP subnet created ever
declare -a policies=()
prepare_policies () {
	local count cn data
	count="$(univention-ldapsearch -LLL -b "$ldap_base" "(objectClass=univentionDhcpSubnet)" dn | grep -c ^dn)"
	log "Number of existing DHCP (Shared) Sub-Networks: $count"
	[ $count -ge 1 ] && return

	for cn in boot dns routing # 'routing' must be last for the following code
	do
		dn="cn=default-settings,cn=$cn,cn=dhcp,cn=policies,$ldap_base"
		data="$(univention-ldapsearch -LLL -o ldif-wrap=no -s base -b "$dn")" || continue
		log "Referencing DHCP policy $cn"
		policies+=(--policy-reference "$dn")
	done

	[ -n "$gateway" ] || return
	[ -n "$data" ] || return
	[[ "$data" = *"univentionDhcpRouters:"* ]] && return

	log "Configuring first router $gateway"
	univention-directory-manager policies/dhcp_routing modify "$@" \
		--dn "$dn" \
		--set routers="$gateway" || die
}
prepare_policies "$@"

python -c '
from __future__ import print_function
from sys import argv, stderr
from optparse import OptionParser
from subprocess import call
from ldap.filter import filter_format
from univention.config_registry.interfaces import ConfigRegistry,Interfaces
import univention.admin.uldap as uldap
import univention.admin.modules as umod
import univention.admin.objects as uobj

ucr = ConfigRegistry()
ucr.load()
base = ucr["ldap/base"]

usage = "%prog [--binddn <DN> --bindpwd <PW>|--bindpwdfile <PWFILE>] --service <DN> [--policy-reference <POLICY-DN>]..."
parser = OptionParser(usage=usage)
parser.add_option("--binddn")
parser.add_option("--bindpwd")
parser.add_option("--bindpwdfile")
parser.add_option("--service")
parser.add_option("--policy-reference", action="append", default=[])
opt, args = parser.parse_args()
if opt.bindpwdfile:
	with open(opt.bindpwdfile) as f:
		opt.bindpwd = f.readline().strip()

umod.update()
mod = umod.get("dhcp/subnet")

def cred():
	yield opt.binddn, opt.bindpwd
	yield "cn=admin,%(ldap/base)s" % ucr, open("/etc/ldap.secret").read()
	yield ucr["ldap/hostdn"], open("/etc/machine.secret").read()

co = None
po = uldap.position(base)
for binddn, bindpwd in cred():
	try:
		lo = uldap.access(
			host=ucr["ldap/master"],
			port=ucr.get("ldap/master/port", "7389").split(",")[0],
			base=base,
			binddn=binddn,
			bindpw=bindpwd,
		)
		umod.init(lo, po, mod)
		print("Using BINDDN %s" % (binddn,))
		break
	except Exception as ex:
		print(ex, file=stderr)
else:
	exit(1)

ifaces = Interfaces(ucr)
for name, iface in ifaces.ipv4_interfaces:
	addr = iface.ipv4_address()
	network = str(iface.network or addr.network)
	if mod.lookup(co, lo, filter_s=filter_format("cn=%s", [network]), base=base):
		print("DHCP subnet %s already exists" % (network,))
		continue

	obj = mod.object(co, lo, uldap.position(opt.service))
	obj["subnet"] = network
	obj["broadcastaddress"] = str(iface.broadcast or addr.broadcast)
	obj["subnetmask"] = str(addr.netmask)
	obj.policies = opt.policy_reference
	try:
		obj.create()
		print("DHCP subnet %s created" % (obj.dn,))
	except Exception as ex:
		print(ex, file=stderr)
' --service "$SERVICE" "$@" "${policies[@]}" || die

ln -s /etc/runit/univention-dhcp /etc/runit/univention/univention-dhcp >/dev/null 2>&1

ucs_addServiceToLocalhost 'DHCP' "$@"

joinscript_save_current_version

exit 0
