#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention RADIUS 802.1X
#  NTLM-Authentication program
#
# Copyright (C) 2012-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of the software contained in this package
# as well as the source package itself are made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this package provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use the software under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

from __future__ import print_function

import optparse
import sys

from univention.radius import get_NetworkAccess
from univention.radius.networkaccess import NetworkAccessError
import univention.radius.pyMsChapV2 as pyMsChapV2


LOGFIILE = '/var/log/univention/radius_ntlm_auth.log'


def main():
	parser = optparse.OptionParser()
	parser.add_option('--request-nt-key', action='store_true', dest='requestNtKey')
	parser.add_option('--username', dest='Username')
	parser.add_option('--challenge', dest='Challenge')
	parser.add_option('--nt-response', dest='Response')
	parser.add_option('--station-id', dest='stationId')
	(options, args, ) = parser.parse_args()
	if not options.requestNtKey:
		print('Missing required parameter --request-nt-key!')
		return 1
	if not options.Username:
		print('Missing required parameter --username!')
		return 1
	if not options.Challenge:
		print('Missing required parameter --challenge!')
		return 1
	if not options.Response:
		print('Missing required parameter --nt-response!')
		return 1
	options.Challenge = options.Challenge.decode('hex')
	options.Response = options.Response.decode('hex')
	NetworkAccess = get_NetworkAccess()
	networkAccess = NetworkAccess(options.Username, options.stationId, logfile=LOGFIILE)
	try:
		PasswordHash = networkAccess.getNTPasswordHash()
	except NetworkAccessError as exc:
		PasswordHash = None
		networkAccess.logger.warning(exc.msg)
	if PasswordHash and pyMsChapV2.ChallengeResponse(options.Challenge, PasswordHash) == options.Response:
		print('NT_KEY: %s' % (pyMsChapV2.HashNtPasswordHash(PasswordHash).encode('hex').upper(), ))
		return 0
	else:
		print('Logon failure (0xc000006d)')
		return 1


if __name__ == "__main__":
	sys.exit(main())
