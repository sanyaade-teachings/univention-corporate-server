#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention S4 Connector
#  Adjust obsolete values in pickled "UCS rejected" GPO and WMI changesets
#
# Copyright 2015-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import os
import imp
import sqlite3
import sys
import cPickle
import ldap
import univention.uldap
from univention.config_registry import ConfigRegistry
import univention.s4connector.s4
import subprocess

CONFIGBASENAME = "connector"
mapping = imp.load_source('mapping', '/etc/univention/%s/s4/mapping.py' % CONFIGBASENAME)

configRegistry = ConfigRegistry()
configRegistry.load()


class S4ConnectorWrapper(univention.s4connector.s4.s4):

	def __init__(self, CONFIGBASENAME, property, ucr, s4_ldap_host, s4_ldap_port, s4_ldap_base, s4_ldap_binddn, s4_ldap_bindpw, s4_ldap_certificate, listener_dir):
		univention.s4connector.s4.s4.__init__(self, CONFIGBASENAME, property, ucr, s4_ldap_host, s4_ldap_port, s4_ldap_base, s4_ldap_binddn, s4_ldap_bindpw, s4_ldap_certificate, listener_dir, init_group_cache=False)

	def recode_attribs(self, attribs):
		nattribs = {}
		for key in attribs.keys():
			if key in self.ucs_no_recode:
				nattribs[key] = attribs[key]
			else:
				try:
					nvals = []
					for val in attribs[key]:
						nvals.append(unicode(val, 'utf8'))
					nattribs[unicode(key, 'utf8')] = nvals
				except UnicodeDecodeError:
					nattribs[key] = attribs[key]

		return nattribs

	def __map_openldap_changeset_to_s4_object_like_the_s4_connector_does_it(self, key, changeset):
		"""this is basically s4.__sync_file_from_ucs"""

		(dn, new, old, old_dn) = changeset

		if dn == 'cn=Subschema':
			return

		new = self.recode_attribs(new)
		old = self.recode_attribs(old)

		change_type = 'modify'
		object = {'dn': unicode(dn, 'utf8'), 'modtype': change_type, 'attributes': new}

		if old_dn:
			object['olddn'] = unicode(old_dn, 'utf8')  # needed for correct samaccount-mapping

		# premapped_ucs_dn = object['dn']
		s4_object = self._object_mapping(key, object, 'ucs')
		return s4_object

	def adjusted_openldap_changeset(self, rejectClass, changeset):
		(dn, new, old, old_dn) = changeset

		print ''
		print "INFO: Checking existing reject for %s" % (dn,)

		if rejectClass.attributes_of_interest:
			list_of_interesting_modified_attributes = []
			for attr, val in new.items():
				if attr not in rejectClass.attributes_of_interest:
					continue

				# check values (according to s4connector diffmode)
				old_val = old.get(attr, [])
				if val == old_val:
					continue
				list_of_interesting_modified_attributes.append(attr)

			if not list_of_interesting_modified_attributes:
				return
		else:
			list_of_interesting_modified_attributes = None  # i.e. all

		# Map dn and attributes from the openldap_changeset pickle to Samba4 dn and attrs:
		s4_object_from_openldap_changeset = self.__map_openldap_changeset_to_s4_object_like_the_s4_connector_does_it(rejectClass.mapping_key, changeset)

		# Get the current OpenLDAP object
		ldap_object_ucs = self.get_ucs_ldap_object(dn)
		if not ldap_object_ucs:
			print "INFO: Object %s does not exist any longer in UCS LDAP"
			return
		# if not "msGPOContainer" in ldap_object_ucs.get("objectClass", []):
		#	return
		if not set(list_of_interesting_modified_attributes) & set(ldap_object_ucs.keys()):
			print "INFO: Object %s does not have any of the modified attributes any longer in UCS LDAP : %s" % (dn, ', '.join(list_of_interesting_modified_attributes))
			print "      Ok, skipping"
			return

		# Get the current Samba4 object
		ldap_object_s4 = self.get_object(s4_object_from_openldap_changeset['dn'])
		if not ldap_object_s4:
			print "INFO: Object %s does not exist any longer in Samba4"
			return

		# Map the Samba object attributes to OpenLDAP
		s4_object = {'dn': dn, 'modtype': 'modify', 'attributes': ldap_object_s4}
		mapped_s4_object = self._object_mapping(rejectClass.mapping_key, s4_object)

		# Compare the interesting attributes:
		recoded_ldap_object_ucs = self.recode_attribs(ldap_object_ucs)
		adjusted = False
		for attr in list_of_interesting_modified_attributes:
			if mapped_s4_object['attributes'].get(attr) == recoded_ldap_object_ucs.get(attr):
				print "INFO: Attribute %s in OpenLDAP is %s, reject value %s is obsolete." % (attr, ldap_object_ucs.get(attr), new[attr])
				new[attr] = ldap_object_ucs.get(attr)
				adjusted = True
			else:
				print 'WARN: Attribute "%s" in OpenLDAP is %s, reject value is %s and current Samba4 value is %s.' % (attr, ldap_object_ucs.get(attr), new[attr], mapped_s4_object['attributes'].get(attr))

		if adjusted:
			return (dn, new, old, old_dn)
		else:
			print '      This script cannot resolve this conflict.'
			print '      In case the reason for this reject gets fixed it might result in the Samba4 value getting set to %s.' % (new[attr],)
			print '      The values should be checked and possibly adjusted manually in case this not desired.'


class UCSReject(object):
	objectclasses_of_interest = set()
	attributes_of_interest = set()

	@classmethod
	def openldap_changeset_objectclass_matches(cls, new):
		if cls.objectclasses_of_interest:
			ocs = set(new.get("objectClass", []))
			if not cls.objectclasses_of_interest & ocs:
				return False

		return True


class UCSReject_msGPO(UCSReject):
	mapping_key = 'msGPO'
	objectclasses_of_interest = set(("msGPOContainer",))
	attributes_of_interest = set(("msGPOFlags", "msGPOVersionNumber", "msGPOSystemFlags", "msGPOFunctionalityVersion", "msGPOFileSysPath", "msGPOMachineExtensionNames", "msGPOUserExtensionNames", "msGPOWQLFilter",))


class UCSReject_msWMIFilter(UCSReject):
	mapping_key = 'msWMIFilter'
	objectclasses_of_interest = set(("msWMISom",))
	attributes_of_interest = set(("msWMIAuthor", "msWMICreationDate", "msWMIChangeDate", "msWMIParm1", "msWMIParm2", "msWMIParm3", "msWMIParm4", "msWMIintFlags1", "msWMIintFlags2", "msWMIintFlags3", "msWMIintFlags4", "msWMISourceOrganization"))


class UCSReject_sambaUserWorkstations(UCSReject):
	mapping_key = 'user'
	objectclasses_of_interest = set(("sambaSamAccount",))
	attributes_of_interest = set(("sambaUserWorkstations",))


def dump_object_to_file(filename, object_data):
	tmp_file = os.path.join('/var/lib/univention-connector/s4/tmp', os.path.basename(filename))

	f = open(tmp_file, 'w')
	os.chmod(tmp_file, 0600)
	p = cPickle.Pickler(f)
	p.dump(object_data)
	p.clear_memo()
	f.close()

	os.rename(tmp_file, filename)


def invoke_s4_connector_init_script(action_string):
	cmd = ('invoke-rc.d', 'univention-s4-connector', action_string)
	p = subprocess.Popen(cmd, close_fds=True)
	p.wait()


def connect():
	if configRegistry.get('%s/s4/ldap/bindpw' % CONFIGBASENAME) and os.path.exists(configRegistry['%s/s4/ldap/bindpw' % CONFIGBASENAME]):
		s4_ldap_bindpw = open(configRegistry['%s/s4/ldap/bindpw' % CONFIGBASENAME]).read()
		if s4_ldap_bindpw[-1] == '\n':
			s4_ldap_bindpw = s4_ldap_bindpw[0:-1]
	else:
		s4_ldap_bindpw = None

	try:
		s4c = S4ConnectorWrapper(
			CONFIGBASENAME,
			mapping.s4_mapping,
			configRegistry,
			configRegistry['%s/s4/ldap/host' % CONFIGBASENAME],
			configRegistry['%s/s4/ldap/port' % CONFIGBASENAME],
			configRegistry['%s/s4/ldap/base' % CONFIGBASENAME],
			configRegistry.get('%s/s4/ldap/binddn' % CONFIGBASENAME, None),
			s4_ldap_bindpw,
			configRegistry['%s/s4/ldap/certificate' % CONFIGBASENAME],
			configRegistry['%s/s4/listener/dir' % CONFIGBASENAME]
		)
	except ldap.SERVER_DOWN:
		print "ERROR: Can't initialize LDAP-Connections."
		raise

	return s4c


if __name__ == '__main__':

	cache_db = sqlite3.connect('/etc/univention/connector/s4internal.sqlite')
	c = cache_db.cursor()
	c.execute("SELECT * FROM 'UCS rejected'")
	rejected = c.fetchall()
	cache_db.close()
	if not rejected:
		print "Ok, no rejects, nothing to do."
		sys.exit(0)

	print "Checking for obsolete rejects"
	invoke_s4_connector_init_script('stop')
	try:
		s4c = connect()

		for filename, dn in rejected:
			try:
				with open(filename, 'r') as f:
					changeset = cPickle.load(f)
					(dn, new, old, old_dn) = changeset
			except (IOError, EOFError) as e:
				continue

			if not (new and old):
				continue

			for rejectClass in (UCSReject_msGPO, UCSReject_msWMIFilter, UCSReject_sambaUserWorkstations):
				if rejectClass.openldap_changeset_objectclass_matches(new):
					adjusted_object_data = s4c.adjusted_openldap_changeset(rejectClass, changeset)
					if adjusted_object_data:
						print "INFO: Adjusting reject %s for %s" % (filename, dn)
						print "      The reject may now resolve automatically."
						print "      It's recommended to check the values manually now."
						dump_object_to_file(filename, adjusted_object_data)
					break
	finally:
		print ''
		invoke_s4_connector_init_script('start')
