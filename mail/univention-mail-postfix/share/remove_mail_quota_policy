#!/usr/bin/python2.7 -u
#
# Univention mail server
#  remove deprecated Cyrus mail quota policy objects
#
# Copyright 2018-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import os
import grp
import stat
import sys
import copy
import logging
from argparse import ArgumentParser
from ldap import explode_dn
from ldap.filter import filter_format
from univention.admin import uldap
from univention.config_registry import ConfigRegistry
import univention.admin.modules


LOGFILE = '/var/log/univention/remove_mail_quota_policy.log'
DEBUG_LOG_FORMAT = "%(asctime)s %(levelname)-5s l.%(lineno)03d  %(message)s"

ucr = ConfigRegistry()
ucr.load()


def parse_cmdline():
	defaults = dict(
		modify=False,
		verbose=False
	)
	parser = ArgumentParser(
		description='Remove Cyrus mail quota policy references and objects from LDAP.',
		epilog='All output (incl. debugging statements) is written to logfile {!r}.'.format(LOGFILE)
	)
	parser.add_argument(
		'-m',
		'--modify',
		dest='modify',
		action='store_true',
		help="Commit changes to LDAP [default: %(default)s (dry run)].")
	parser.add_argument(
		'-v',
		'--verbose',
		action='store_true',
		help='Enable debugging output on the console [default: %(default)s].')
	parser.set_defaults(**defaults)

	return parser.parse_args()


class QuotaRemoval(object):
	_module_cache = {}

	def __init__(self, args):
		self.modify = args.modify
		self.verbose = args.verbose
		self.mail_quota_ldap_objs = []
		self.logger = self.setup_logging()
		self.lo, _po = uldap.getAdminConnection()
		univention.admin.modules.update()
		self.logger.debug('Starting with modify=%r%s.', self.modify, '' if self.modify else ' (a dry-run)')

	def setup_logging(self):
		open(LOGFILE, "a").close()  # touch
		os.chown(LOGFILE, 0, grp.getgrnam('adm').gr_gid)
		os.chmod(LOGFILE, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP)

		logger = logging.getLogger()
		logger.setLevel(logging.DEBUG)
		handler = logging.StreamHandler(stream=sys.stdout)
		handler.setLevel(logging.DEBUG if self.verbose else logging.INFO)
		logger.addHandler(handler)
		handler = logging.FileHandler(filename=LOGFILE)
		handler.setLevel(logging.DEBUG)
		handler.setFormatter(logging.Formatter(fmt=DEBUG_LOG_FORMAT))
		logger.addHandler(handler)
		return logger

	@classmethod
	def get_udm_module(cls, module_name):
		if module_name not in cls._module_cache:
			try:
				cls._module_cache[module_name] = univention.admin.modules.get(module_name)
			except (IndexError, KeyError):
				cls._module_cache[module_name] = None
		return cls._module_cache[module_name]

	def search_policies(self):
		self.logger.info('Searching Cyrus mail quota objects in LDAP.')
		self.mail_quota_ldap_objs = self.lo.search('objectClass=univentionMailQuota')
		if not self.mail_quota_ldap_objs:
			self.logger.info('    none found.')
			return self.mail_quota_ldap_objs
		for dn, attr in self.mail_quota_ldap_objs:
			self.logger.info('    %s', attr['cn'][0])
			self.logger.info('        Quota: %s', attr['univentionMailQuotaMB'][0])
			self.logger.info('        DN: %r', dn)
			attr['__referenced_by'] = self.lo.search(filter_format('univentionPolicyReference=%s', (dn,)))
			for ref_dn, ref_attr in attr['__referenced_by']:
				self.logger.info('        referenced by %r.', ref_dn)
		return self.mail_quota_ldap_objs

	def remove_policies(self):
		for dn, attr in self.mail_quota_ldap_objs:
			self.logger.info('* %s: removing policy references.', attr['cn'][0])
			if not attr['__referenced_by']:
				self.logger.info('    no policy references.')
			for ref_dn, ref_attr in attr['__referenced_by']:
				self.logger.info('    removing policy reference from %r.', ref_dn)
				try:
					module_name = ref_attr['univentionObjectType'][0]
					self.logger.debug('        univentionObjectType=%r', module_name)
					mod = self.get_udm_module(module_name)
				except (IndexError, KeyError):
					mod = None
				if mod:
					self.logger.debug('        using UDM.')
					filter_s = explode_dn(ref_dn, 0)[0]
					base = ','.join(explode_dn(ref_dn, 0)[1:])
					obj = mod.lookup(None, self.lo, filter_s, base=base)[0]
					obj.open()
					obj.policies.remove(dn)
					if self.modify:
						obj.modify()
						self.logger.info('        done.')
					else:
						self.logger.info('        skipping (dry-run).')
				else:
					self.logger.debug('        no UDM module, removing directly from LDAP.')
					pr_new = list(ref_attr['univentionPolicyReference'])
					pr_new.remove(dn)
					if self.modify:
						self.lo.modify(
							ref_dn,
							[('univentionPolicyReference', ref_attr['univentionPolicyReference'], pr_new)]
						)
						self.logger.info('        done.')
					else:
						self.logger.info('        skipping (dry-run).')

			self.logger.info('* %s: removing policy (%r).', attr['cn'][0], dn)
			mod = self.get_udm_module('policies/mailquota')
			if mod:
				self.logger.debug('    using UDM')
				filter_s = explode_dn(dn, 0)[0]
				base = ','.join(explode_dn(dn, 0)[1:])
				obj = mod.lookup(None, self.lo, filter_s, base=base)[0]
				if self.modify:
					obj.remove()
					self.logger.info('    done.')
				else:
					self.logger.info('    skipping (dry-run).')
			else:
				if self.modify:
					self.logger.debug('    no UDM module, removing directly from LDAP.')
					self.lo.delete(dn)
					self.logger.info('    done.')
				else:
					self.logger.info('    skipping (dry-run).')

	def remove_udm_module(self):
		self.logger.info('Removing UDM mailquota module.')
		mod = self.get_udm_module('settings/udm_module')
		quota_udm_modules = mod.lookup(None, self.lo, 'cn=policies/mailquota')
		if not quota_udm_modules:
			self.logger.info('    no module found.')
		for qum in quota_udm_modules:
			self.logger.info('    removing UDM module %r (%r).', qum['name'], qum.dn)
			module_data = copy.deepcopy(qum.info)
			del module_data['data']
			self.logger.debug('    UDM module data: %r', module_data)
			if self.modify:
				qum.remove()
				self.logger.info('    done.')
			else:
				self.logger.info('    skipping (dry-run).')


if __name__ == '__main__':
	args = parse_cmdline()
	qr = QuotaRemoval(args)
	qr.search_policies()
	qr.remove_policies()
	qr.remove_udm_module()
