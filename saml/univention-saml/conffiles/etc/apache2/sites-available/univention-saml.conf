@%@UCRWARNING=# @%@

@!@
import os.path
from univention.saml.lib import get_idps
idps = get_idps(configRegistry)
certificate = configRegistry.get('saml/idp/certificate/certificate', '')
if os.path.isfile(certificate):
	print("Alias /simplesamlphp/saml2/idp/certificate %s" % (certificate,))
	print("""<Directory "{}">
		<Files "{}">
			Require all granted
		</Files>
</Directory>
""".format(os.path.dirname(certificate), os.path.basename(certificate)))
for idp in sorted(idps, key=lambda v: -1 * v['basepath'].count('/')):
	# The most specific Alias needs to come first
	print('Alias /%s /usr/share/simplesamlphp/www' % (idp['basepath'], ))

if configRegistry.is_true('saml/idp/https'):
	print('RewriteEngine On')
	print('RewriteCond %{HTTPS} !=on')
	for idp in sorted(idps, key=lambda v: -1 * v['basepath'].count('/')):
		print('RewriteRule ^/?%s/(.*) https://%%{SERVER_NAME}/%s/$1 [R,L]' % (idp['basepath'], idp['basepath'], ))
@!@

<Directory /usr/share/simplesamlphp/www/>
	<FilesMatch ".+\.ph(p[345]?|t|tml)$">
		SetHandler php-cgi
	</FilesMatch>
	Action php-cgi /saml-bin/php-cgi

	Require all granted
</Directory>
<Directory /var/www/saml/>
	Options -Indexes
</Directory>
@!@
sso_fqdn = configRegistry.get('ucs/server/sso/fqdn', 'ucs-sso.%s' % configRegistry.get('domainname'))
ssofqdn = {'ssofqdn': sso_fqdn}
import os.path
enable_virtualhost = configRegistry.is_true('ucs/server/sso/virtualhost', True)
if enable_virtualhost and os.path.isfile('/etc/univention/ssl/%(ssofqdn)s/cert.pem' % ssofqdn) and os.path.isfile('/etc/univention/ssl/%(ssofqdn)s/private.key' % ssofqdn):
	ssofqdn.update(dict(
		ssl_certificate=configRegistry.get('saml/apache2/ssl/certificate', '/etc/univention/ssl/%(ssofqdn)s/cert.pem' % ssofqdn),
		ssl_certificate_key=configRegistry.get('saml/apache2/ssl/key', '/etc/univention/ssl/%(ssofqdn)s/private.key' % ssofqdn),
		ssl_ca_certificate=configRegistry.get('saml/apache2/ssl/ca', '/etc/univention/ssl/ucsCA/CAcert.pem'),
		ssl_certificate_chain='',
	))
	if configRegistry.get('saml/apache2/ssl/certificatechain'):
		ssofqdn['ssl_certificate_chain'] = '	SSLCertificateChainFile %s' % configRegistry.get('saml/apache2/ssl/certificatechain')
	print('''
<IfModule mod_ssl.c>
<VirtualHost *:443>
	IncludeOptional /etc/apache2/sso-vhost.conf.d/*.conf
	SSLEngine on
	SSLProxyEngine on
	ServerName %(ssofqdn)s
	SSLCertificateFile %(ssl_certificate)s
	SSLCertificateKeyFile %(ssl_certificate_key)s
	SSLCACertificateFile %(ssl_ca_certificate)s
	%(ssl_certificate_chain)s
	DocumentRoot /var/www/
	RedirectMatch ^/$ /simplesamlphp/

	ScriptAlias /saml-bin /var/www/saml
	SuexecUserGroup samlcgi samlcgi

	# simplesamlphp uses this header to decide which idp config to use.
	# This decision is case sensitive. Setting the HOST header here, ensures the right case.
	RequestHeader set HOST %(ssofqdn)s

	RewriteEngine on
	RewriteCond %%{HTTP:Authorization}  !^$
	RewriteRule .* - [E=HTTP_AUTHORIZATION:%%{HTTP:Authorization},L]
</VirtualHost>
<VirtualHost *:80>
	IncludeOptional /etc/apache2/sso-vhost.conf.d/*.conf
	ServerName %(ssofqdn)s
	DocumentRoot /var/www/
	RedirectMatch ^/$ /simplesamlphp/

	ScriptAlias /saml-bin /var/www/saml
	SuexecUserGroup samlcgi samlcgi

	RewriteEngine on
	RewriteCond %%{HTTP:Authorization}  !^$
	RewriteRule .* - [E=HTTP_AUTHORIZATION:%%{HTTP:Authorization},L]
</VirtualHost>
</IfModule>
''' % ssofqdn)

# If a single FQDN is required for SSO, the virtualhost directive above is deactivated.
# However, we need the suexec features, so activate them globally (does not work for Directory)
# Warning: This interferes with other programs that use cgi scripts.
elif not enable_virtualhost:
	print('''
IncludeOptional /etc/apache2/sso-vhost.conf.d/*.conf
ScriptAlias /saml-bin /var/www/saml
SuexecUserGroup samlcgi samlcgi

<Location /saml-bin>
	RewriteEngine on
	RewriteCond %{HTTP:Authorization}  !^$
	RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]
</Location>
''')
@!@
