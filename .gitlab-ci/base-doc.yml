include:
  - project: 'univention/documentation/sphinx-docker'
    file: 'pipeline/sphinx.yml'

stages:
  - build
  - merge
  - review
  - staging
  - production

.sphinx-doc:
  variables:
    DOC_TARGET_VERSION: "5.1"
    CHANGELOG_TARGET_VERSION: "5.1-0"
  artifacts:
    paths:
      - $DOCS_DIR/_build
      - $CI_PROJECT_DIR/out

.sphinx-html:
  extends:
    - .sphinx-doc
    - .sphinx-html-template
  script:
    - mkdir -p "$CI_PROJECT_DIR"/out/"$DOC_NAME"/"$DOC_TARGET_VERSION"/"$language"
    - make -C "$DOCS_DIR" -e FORCE_COLOR="TRUE" -e SPHINXOPTS="-v -D language='$language'" -e BUILDDIR="_build/$language" html
    - rsync -av --delete "$DOCS_DIR"/_build/"$language"/html/ "$CI_PROJECT_DIR"/out/"$DOC_NAME"/"$DOC_TARGET_VERSION"/"$language"

.sphinx-pdf:
  extends:
    - .sphinx-doc
    - .sphinx-pdf-template
  script:
    - mkdir -p "$CI_PROJECT_DIR"/out/"$DOC_NAME"/"$DOC_TARGET_VERSION"/"$language"
    - make -C "$DOCS_DIR" -e FORCE_COLOR="TRUE" -e SPHINXOPTS="-v -D language='$language'" -e BUILDDIR="_build/$language" latexpdf
    - rsync -av "$DOCS_DIR"/_build/"$language"/latex/"$DOC_NAME".pdf "$CI_PROJECT_DIR"/out/"$DOC_NAME"/"$DOC_TARGET_VERSION"/"$language"/"$DOC_NAME".pdf

.sphinx-linkcheck:
  extends:
    - .sphinx-doc
    - .sphinx-linkcheck-template
  script:
    - make -C "$DOCS_DIR" -e FORCE_COLOR="TRUE" -e SPHINXOPTS="-v -D language='$language'" -e BUILDDIR="_build/$language" linkcheck

.sphinx-spelling:
  extends:
    - .sphinx-doc
    - .sphinx-spelling-template
  script:
    - make -C "$DOCS_DIR" -e FORCE_COLOR="TRUE" -e SPHINXOPTS="-v -W --keep-going -D language='$language'" -e BUILDDIR="_build/$language" spelling

.sphinx-warnings:
  extends: .sphinx-warnings-template
  script:
    - make -C "$DOCS_DIR" -e FORCE_COLOR="TRUE" -e SPHINXOPTS="-v -W --keep-going -D language='$language'" -e BUILDDIR="_build/$language" html

# The child pipeline needs at minimum one job to run - otherwise the sub-pipeline fails
webframe:
  stage: build
  image: $DOC
  script:
    - cp -rTu /DocBook/webframe public
  artifacts:
    paths:
      - public

.publish:
  interruptible: false
  variables:
    GIT_STRATEGY: none

review:
  stage: review
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
  extends: .publish
  tags:
    - omar
  script:
    - rsync -av --delete out/ /var/univention/buildsystem2/test_mirror/ftp/download/docs.$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://apt.knut.univention.de/download/docs.$CI_COMMIT_REF_SLUG/
    on_stop: stop_review
    auto_stop_in: 1 week

stop_review:
  stage: staging
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: manual
  needs:
    - review
  allow_failure: true
  extends: .publish
  tags:
    - omar
  script:
    - rm -rf /var/univention/buildsystem2/test_mirror/ftp/download/docs.$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop

staging:
  stage: staging
  extends: .publish
  tags:
    - omar
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - rsync -av --delete out/ /var/univention/buildsystem2/test_mirror/ftp/download/docs
  environment:
    name: staging
    url: http://apt.knut.univention.de/download/docs/
