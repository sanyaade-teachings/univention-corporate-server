#!/bin/sh -e
#
# Univention Directory Notifier
#  Replicate one or multiple DN
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2012-2023 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

eval "$(ucr shell)"

fail () {
	echo "Abort: $*" >&2
	exit 1
}

usage () {
	echo "Usage: $0 { --dn <ldap-dn> | <file-name> }"
	echo
	echo "The given LDAP DN will be re-replicated by the Univention Directory Notifier to all UCS systems in this UCS domain. This tool must be run on the Primary Directory Node."
	echo
	echo "Warning: This tool will stop the OpenLDAP and the Notifier daemon."
	echo
}

TEMP=$(getopt -o h --long 'help,dn:' -n "$0" -- "$@") ||
	fail "failed to parse command line arguments: $*"
eval set -- "$TEMP"
unset TEMP
dn=
dnfile=
while [ $# -ge 1 ]
do
	case "$1" in
	--help|-h)
		usage
		exit 0
		;;
	--dn)
		dn="$2"
		shift 2
		;;
	--)
		shift
		break
		;;
	*)
		fail "invalid command line argument"
		;;
	esac
done

if [ -n "$dn" ]
then
	f=one
elif [ -n "$1" ] && [ -s "$1" ]
then
	dnfile="$1"
	f=many
else
	fail 'expected --dn <dn> or <file>'
fi

[ "${server_role:?}" = "domaincontroller_master" ] ||
	fail "This tool must be run on the Primary Directory Node!" >&2

one () {
	tid=$((tid+1))
	echo "$tid $dn m" >>/var/lib/univention-ldap/listener/listener
	echo -n "$tid" >/var/lib/univention-ldap/last_id
}

many () {
	local fn
	while read -r dn
	do
		[ -n "$dn" ] ||
			continue
		slapdn "$dn" ||
			continue
		one
	done <"$dnfile"
}

RESTART_NOTIFIER=0
if pidof univention-directory-notifier >/dev/null ; then
	echo -n "Stopping notifier: "
	RESTART_NOTIFIER=1
	systemctl stop univention-directory-notifier
	sleep 1
	if pidof univention-directory-notifier >/dev/null ; then
		echo "failed"
		fail "Failed to stop the notifier daemon. Please check stop the daemon manually and try again."
	fi
	echo "done"
fi

RESTART_SLAPD=0
if pidof slapd >/dev/null ; then
	echo -n "Stopping slapd: "
	RESTART_SLAPD=1
	systemctl stop slapd >/dev/null
	sleep 1
	if pidof slapd >/dev/null ; then
		echo "failed"
		fail "Failed to stop the OpenLDAP daemon. Please check stop the daemon manually and try again."
	fi
	echo "done"
fi

get_last () {
	local fn _
	for fn in /var/lib/univention-ldap/last_id /var/lib/univention-ldap/listener/listener /var/lib/univention-ldap/listener/istener.priv
	do
		[ -s "$fn" ] ||
			continue
		# shellcheck disable=SC2046
		set -- $(tail -n 1 "$fn")
		tid="$1"
		[ 1 -le "$tid" ] ||
			fail "Invalid last transcation ID: $tid"
		return 0
	done
	fail "Failed to get last transaction ID"
}
get_last

"$f"

rc=0
if [ "$RESTART_SLAPD" = 1 ]; then
	echo -n "Starting slapd: "
	if systemctl start slapd; then
		echo "done"
	else
		echo "failed"
		rc=1
	fi
else
	echo "Warning: slapd remains stopped."
fi
if [ "$RESTART_NOTIFIER" = 1 ]; then
	echo -n "Starting notifier: "
	if systemctl start univention-directory-notifier; then
		echo "done"
	else
		echo "failed"
		rc=1
	fi
else
	echo "Warning: notifier remains stopped."
fi
exit $rc
