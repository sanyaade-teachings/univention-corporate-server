#!/usr/bin/python3
#
# Univention update uniqueMember
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2008-2024 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

import sys

from ldap import MOD_REPLACE
from ldap.filter import filter_format

import univention.uldap
from univention.config_registry import ucr


def main() -> None:
    if ucr.get("server/role", "") not in {"domaincontroller_master", "domaincontroller_backup", "domaincontroller_slave"}:
        return

    try:
        lo = univention.uldap.getRootDnConnection()
    except Exception as ex:
        sys.exit(f"failed to get ldap connection: {ex}")

    # search groups and del/add uniqueMember
    group_oc = ucr.get("ldap/overlay/memberof/objectclass", "posixGroup")
    member_ad = ucr.get("ldap/overlay/memberof/member", "uniqueMember")
    filterstr = filter_format("(&(objectClass=%s)(%s=*))", (group_oc, member_ad))
    results = lo.search(attr=[member_ad], filter=filterstr)
    for dn, attrs in results:
        uniqueMember = attrs.get(member_ad, [])
        if uniqueMember:
            try:
                ml = [
                    (MOD_REPLACE, member_ad, uniqueMember),
                ]
                print(f'modify {dn}')
                lo.modify_s(dn, ml)
            except Exception as e:
                sys.exit(
                    f"E: modifying {dn} failed error with {e}\n"
                    "   please check the membership of this group"
                )


if __name__ == '__main__':
    main()
